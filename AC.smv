/--
NGCoVerif
---------
A Formal Model for 5G access control policy and Verifier

To use 2 consumer system and test related properites, uncomment line s2: protocol() in VAR section of main module.
For other cases, comment it out for better performance and clutterfree counterexamples.

--/

MODULE NF

VAR
    model_id: 0..20;
    CCA_subject: {none, 1, 2, 3, 4,5};
    nfInstanceId: {none, 1, 2, 3, 4,5};
    nfType: {none, nf_1, nf_2, nf_3, nf_4};
    nfStatus: {none, REGISTERED, SUSPENDED, UNDISCOVERABLE};
    sNssais: array 1..2 of {none, 1, 2, 3};
    allowedNFTypes: array 1..2 of {none, nf_1, nf_2, nf_3, nf_4};
    allowedsNssais: array 1..2 of {none, 1, 2, 3};
    load: 0..10;
    capacity: 0..10;
    priority: 0..10;
    nfService1: NFService;

DEFINE
    isNFInstanceValid := 
        CCA_subject != none
        & nfInstanceId != none
        & CCA_subject = nfInstanceId
        & nfType != none
        & nfStatus = REGISTERED
        & nfService1.isServiceInstanceValid
        & ( !(sNssais[1] = none & sNssais[2] = none) ->  (sNssais[1] != sNssais[2] ))
        & nfService1.sNssais[1] in {sNssais[1], sNssais[2], none} 
        & nfService1.sNssais[2] in {sNssais[1], sNssais[2], none}
        & ( !(allowedsNssais[1] = none & allowedsNssais[2] = none) ->  (allowedsNssais[1] != allowedsNssais[2] ))
        ;
        
MODULE NFService

VAR
    allowedNFTypes: array 1..2 of {none, nf_1, nf_2, nf_3, nf_4};
    load: 0..10;
    capacity: 0..10;
    oauth2Required: boolean;
    priority: 0..10;
    serviceInstanceId: {none, 41, 11, 21, 31};
    serviceName: {none, service_1, service_2, service_3, service_4};
    serviceStatus: {none, REGISTERED, SUSPENDED, UNDISCOVERABLE};
    sNssais: array 1..2 of {none, 1, 2, 3};
    allowedsNssais: array 1..2 of {none, 1, 2, 3};
    operation1: Operation;
    operation2: Operation;

DEFINE
    isServiceInstanceValid := 
        serviceInstanceId != none
        & serviceName != none
        & serviceStatus = REGISTERED
        & ( !(sNssais[1] = none & sNssais[2] = none) ->  (sNssais[1] != sNssais[2] ))
        & ( !(allowedsNssais[1] = none & allowedsNssais[2] = none) ->  (allowedsNssais[1] != allowedsNssais[2] ))
        & ((operation1.opName != none | operation2.opName != none) -> (operation1.opName != operation2.opName))
        & operation1.isOperationValid
        & operation1.opScope1 = serviceName
        & operation2.isOperationValid
        & operation2.opScope1 = serviceName;

MODULE Operation

VAR
    allowedNFInstances: array 1..2 of {none, 1, 2, 3, 4,5};
    allowedNFTypes: array 1..2 of {none, nf_1, nf_2, nf_3, nf_4};
    opName: {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
    opScope1: {none, service_1, service_2, service_3, service_4};
    opScope2: {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
    param1: Param;
    param2: Param;

DEFINE
    isOperationValid := 
        opName != none
        & opScope1 in {none, service_1, service_2, service_3, service_4}
        & opScope2 in {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8}
        & (opScope2 = none <-> ((allowedNFTypes[1] = none & allowedNFTypes[2] = none) & (allowedNFInstances[1] = none & allowedNFInstances[2] = none)))
        & ( param1.name = none & param2.name = none
            | param1.name != none & param2.name = none
            | param1.name != none & param2.name != none
        )
        & (!(param1.name = none & param2.name = none) -> param1.name != param2.name)
        & (param1.name = none -> param1.value = 0)
        & (param2.name = none -> param2.value = 0) 
        & (param1.isSensitive -> param1.name != none)
        & (param2.isSensitive -> param2.name != none)
    ;
    
    isParamVerified :=
        isOperationValid 
        & param1.isParamVerified 
        & param2.isParamVerified;

MODULE Param

VAR
    isSensitive: boolean;
    name: {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
    value: 0..100;
    isVerified : boolean;

DEFINE
    isParamVerificationReq := !(name in {none}) & isSensitive;
    isParamVerified := 
    case
        !isParamVerificationReq : TRUE;
        isParamVerificationReq & isVerified: TRUE;
        isParamVerificationReq & !isVerified: FALSE;
        TRUE: FALSE;
    esac;

---------- begin NFDiscoveryRequest declaration ----------
MODULE NFDiscoveryRequest
VAR
    requesterID : {none, 1, 2, 3, 4,5};
    targetNFType : {none, nf_1, nf_2, nf_3, nf_4};
    requesterNFType : {none, nf_1, nf_2, nf_3, nf_4};
    sNssais : {none, 1, 2, 3};
    serviceName : {none, service_1, service_2, service_3, service_4};
    targetNfInstanceId : {none, 1, 2, 3, 4,5};
    requesterSNssais : {none, 1, 2, 3};


DEFINE
    isNFDiscReqValid :=
        requesterID != none
        & targetNFType != none
        & requesterNFType != none
        ;
---------- begin AccessTokenRequest declaration ----------
MODULE AccessTokenRequest(reqForSpecificProducer)
VAR
    grantType : {none, client_credentials};
    nfInstanceId : {none, 1, 2, 3, 4,5};
    scopeService : {none, service_1, service_2, service_3, service_4};
    scopeOperation : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
    targetNFType : {none, nf_1, nf_2, nf_3, nf_4};
    targetNfInstanceId : {none, 1, 2, 3, 4,5};
    targetSnssaiList : {none, 1, 2, 3};
    requesterSNssais : {none, 1, 2, 3};



DEFINE
    isATReqValid := 
        grantType != none
        & nfInstanceId != none
        & scopeService != none
        & (targetNfInstanceId = none xor targetNFType = none)
        & ((reqForSpecificProducer) -> (targetNfInstanceId != none))
        & ((!reqForSpecificProducer) -> (targetNFType != none))
        ;

---------- begin AccessToken declaration ----------
MODULE AccessToken(reqForSpecificProducer)
VAR
    sub : {none, 1, 2, 3, 4,5};
    aud_NFInstanceId : {none, 1, 2, 3, 4,5};
    aud_NFType : {none, nf_1, nf_2, nf_3, nf_4};
    scopeService : {none, service_1, service_2, service_3, service_4};
    scopeOperation : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
    exp_ : boolean;
    producerSnssaiList : array 1..2 of  {none, 1, 2, 3};



DEFINE
    isTokenValid := 
        sub != none
        & (aud_NFInstanceId = none xor aud_NFType = none)
        & ((reqForSpecificProducer) -> (aud_NFInstanceId != none))
        & ((!reqForSpecificProducer) -> (aud_NFType != none))
        & scopeService != none
        & exp_ = FALSE;

---------- begin ServiceRequest declaration ----------
MODULE ServiceRequest
VAR
    subjectID : {none, 1, 2, 3, 4,5};
    audienceID : {none, 1, 2, 3, 4,5};
    service : {none, service_1, service_2, service_3, service_4};
    operation : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
    param1: Param;
    param2: Param;
    sNssais : {none, 1, 2, 3};


DEFINE 
    isServiceRequestValid := 
        subjectID != none 
        & audienceID != none
        & service != none
        & operation != none;

MODULE main

VAR
    --------- NF Configuration variable ----------------
    consumer1: NF;
    consumer2: NF;
    producer1: NF;
    producer2: NF;

    reqForSpecificProducer: boolean;
    ------------------- OAM
    OAMConsumerPresent: boolean;
    OAMProducerPresent: boolean;

    OAMConsumer1Approve: boolean;
    OAMConsumer2Approve: boolean;
    OAMProducer1Approve: boolean;
    OAMProducer2Approve: boolean;
    updateConsumer1: boolean;
    adversaryUpdateConsumer1: boolean;
    updateConsumer2: boolean;
    adversaryUpdateConsumer2: boolean;
    updateProducer1: boolean;
    adversaryUpdateProducer1: boolean;
    updateProducer2: boolean;
    adversaryUpdateProducer2: boolean;

    -------------------- Update------------------------
    -- 0: no update; 1: everything; 2: most things 3: only some
    updateLevelConsumer1: 0..3;
    updateLevelConsumer2: 0..3;
    updateLevelProducer1: 0..3;
    updateLevelProducer2: 0..3;

    updateDiscoveryRequest: boolean;
    updateATRequest: boolean;
    updateServiceRequest: boolean;

    --------- Adversary Control variable ----------------
    adversaryPresent : boolean;
    adversaryDiscoveryRequest: boolean;
    adversaryATRequest: boolean;
    adversaryServiceRequest: boolean;
    
    ------------------------ other params-----------
    disableOptionalParams_AT: boolean;

    s1: protocol(consumer1,consumer2,producer1,producer2,reqForSpecificProducer,OAMConsumerPresent,OAMProducerPresent,OAMConsumer1Approve,OAMConsumer2Approve,OAMProducer1Approve,OAMProducer2Approve,updateConsumer1,updateConsumer2,benignUpdateConsumer,updateProducer1,updateProducer2,benignUpdateProducer,adversaryPresent,adversaryUpdateConsumer1,adversaryUpdateConsumer2,adversaryUpdateProducer1,adversaryUpdateProducer2,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest,disableOptionalParams_AT);
    -- Comment out/uncomment the following line to disable/enable the 2nd consumer. (2nd consumer is not necessary for Finding 1-4.)
    -- s2: protocol(consumer1,consumer2,producer1,producer2,reqForSpecificProducer,OAMConsumerPresent,OAMProducerPresent,OAMConsumer1Approve,OAMConsumer2Approve,OAMProducer1Approve,OAMProducer2Approve,updateConsumer1,updateConsumer2,benignUpdateConsumer,updateProducer1,updateProducer2,benignUpdateProducer,adversaryPresent,adversaryUpdateConsumer1,adversaryUpdateConsumer2,adversaryUpdateProducer1,adversaryUpdateProducer2,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest,disableOptionalParams_AT);


--------------------- service request-related properties -----------------
/-- Property 1.1: 
    For a service to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, No adversary NF update, adversaryDiscoveryRequest enabled
    Result: Confused Producer Attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     ((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

/-- Property 1.2:
    Implementation idea: same as P1.1. the above counterexample is for specific nf type. So, other attacks might exist for specific producer type ATReq.
    Adversary Assumption: OAMs present, No adversary NF update, adversaryDiscoveryRequest enabled.
    notable property Assumption: access token request not for specificNFtype
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(reqForSpecificProducer)
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     ((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

/-- Property 1.3:
    Same as P1.1. However, enabling benign update in producer's profile might bring about new attack.
    Adversary Assumption: OAMs present, No adversary NF update. 
    notable property Assumption: benign update = 3 of producer enabled for atmost once.
    Result: Access Token Reuse attack, for specific nf type
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1 in {0,3}) & G(updateLevelProducer1 = 3 -> X(G(updateLevelProducer1 = 0)))
    --     & G(updateLevelProducer2 in {0,3}) & G(updateLevelProducer2 = 3 -> X(G(updateLevelProducer2 = 0)))

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     ((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

/-- Property 1.4:
    Same as P1.3. However, the counterexample of P1.3 is for ATReq for specific nf type only. Toggling this might give new attacks.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Notable property Assumption: Toggled the reqForSpecificProducer control variable to off, benign update of producer enabled for atmost once.
    Result: Revoked Accesss Token Reuse Attack for specific nf instance.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1 in {0,3}) & G(updateLevelProducer1 = 3 -> X(G(updateLevelProducer1 = 0)))
    --     & G(updateLevelProducer2 in {0,3}) & G(updateLevelProducer2 = 3 -> X(G(updateLevelProducer2 = 0)))

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(reqForSpecificProducer)
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     ((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

/-- Property 1.5:
    Query: For a service to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, uConsumer = 3 once, adversaryDiscoveryRequest adversaryATRequest adversaryServiceRequest enabled.
    Notable property Assumption: Toggled the reqForSpecificProducer control variable to off, benign update of producer enabled for atmost once.
    Result: Confused Producer Attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------adversary control---------
    --     G(adversaryPresent)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) 
    --     & G(updateLevelConsumer1 in {3} -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) 
    --     & G(updateLevelConsumer2 in {3} -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     slice_check_for_property
    -- );

/-- Property 1.6:
    Query: For a service to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, uConsumer = 3 once, adversaryDiscoveryRequest adversaryATRequest adversaryServiceRequest enabled.
    Notable property Assumption: reqForSpecificProducer enabled
    Result: No counterexample
    
    --/
    -- LTLSPEC
    -- (   
    --     ------------adversary control---------
    --     G(adversaryPresent)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) 
    --     & G(updateLevelConsumer1 in {3} -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) 
    --     & G(updateLevelConsumer2 in {3} -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     & G(reqForSpecificProducer)
    -- )->
    -- G(
    --     slice_check_for_property
    -- );

/-- Property 1.7:
    Query: For a service to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, uConsumer = 3 or 0 always, adversaryDiscoveryRequest adversaryATRequest adversaryServiceRequest enabled.
    Notable property Assumption: reqForSpecificProducer enabled
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------adversary control---------
    --     G(adversaryPresent)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) 
    --     & G(updateLevelConsumer1 in {3} -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) 
    --     & G(updateLevelConsumer2 in {3} -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)
    --     ------------others-----------------
    --     & G(reqForSpecificProducer)
    --     & G(
    --         isNFServiceNFTypeConsistent
    --         & isOpNameOpScopeConsistent
    --         & isOpNameNFServiceNameConsistent
    --         & isOpNameParamConsistent
    --         & isOpScopeAuthAttribConsistent
    --         & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     slice_check_for_property
    -- );

/-- Property 1.8:
    Adversary Assumption: OAMs present, uConsumer = 3 or 2 or 0 once, adversaryDiscoveryRequest adversaryATRequest adversaryServiceRequest enabled.
    Notable property Assumption: reqForSpecificProducer enabled
    Result: Variation of attack 1 for AT req for specific nf type 
    --/
    -- LTLSPEC
    -- (   
    --     ------------adversary control---------
    --     G(adversaryPresent)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2,3}) 
    --     & G(updateLevelConsumer1 in {2,3} -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2,3}) 
    --     & G(updateLevelConsumer2 in {2,3} -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)
    --     ------------others-----------------
    --     & G(
    --         isNFServiceNFTypeConsistent
    --         & isOpNameOpScopeConsistent
    --         & isOpNameNFServiceNameConsistent
    --         & isOpNameParamConsistent
    --         & isOpScopeAuthAttribConsistent
    --     )
    -- )->
    -- G(
    --     slice_check_for_property
    -- );


/-- Property 1.9:
    Adversary Assumption: OAMs present, uConsumer = 3 or 2 or 0 once, adversaryDiscoveryRequest adversaryATRequest adversaryServiceRequest enabled.
    Notable property Assumption: reqForSpecificProducer enabled
    Result: Access Token Reuse attack (Due to consumer's NF update)
    --/
    -- LTLSPEC
    -- (   
    --     ------------adversary control---------
    --     G(adversaryPresent)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2,3}) 
    --     & G(updateLevelConsumer1 in {2,3} -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2,3}) 
    --     & G(updateLevelConsumer2 in {2,3} -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)
    --     ------------others-----------------
    --     & G(
    --         isNFServiceNFTypeConsistent
    --         & isOpNameOpScopeConsistent
    --         & isOpNameNFServiceNameConsistent
    --         & isOpNameParamConsistent
    --         & isOpScopeAuthAttribConsistent
    --         & isOpParamSensitivityConsistent
    --     )
    --     & G(reqForSpecificProducer)
    -- )->
    -- G(
    --     slice_check_for_property
    -- );

/-- Property 1.10: 
    Adversary Assumption: OAMs present, uConsumer = 3 or 2 or 0 once, adversaryDiscoveryRequest adversaryATRequest adversaryServiceRequest disabled.
    Notable property Assumption: reqForSpecificProducer enabled
    Result: Access Token Reuse attack (Due to consumer's NF update)
    --/
    -- LTLSPEC
    -- (   
    --     ------------adversary control---------
    --     G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2,3}) 
    --     & G(updateLevelConsumer1 in {2,3} -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2,3}) 
    --     & G(updateLevelConsumer2 in {2,3} -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(reqForSpecificProducer)
    -- )->
    -- G(
    --     slice_check_for_property
    -- );

/-- Property 1.11: 
    For a nf service request to be granted, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice.
    Adversary Assumption: OAMs present, No adversary NF update 
    Resilt: Confused producer attack in combination with Default Overprivilege Attack when consumer.sNssais is empty
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )    
    --     )->
    -- G( 
    --     ((
    --         s1.isServiceReqGranted 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );

/-- Property 1.12: 
    For a nf service request to be granted, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice.
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption: Both consumer's sNssais should not be none initally.
    Resilt: Confused producer attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )    
    --     )->
    -- G( 
    --     ((
    --         s1.isServiceReqGranted 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );

/-- Property 1.13: 
    For a nf service request to be granted, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice.
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption: Both consumer's sNssais should not be none initally, reqForSpecificProducer.
    Resilt: No counterexample.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------other constraints---------
    --     & G(reqForSpecificProducer)
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )    
    --     )->
    -- G( 
    --     ((
    --         s1.isServiceReqGranted 
    --         & s1.producer.nfInstanceId != producer2.nfInstanceId
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );

------------------------ NF Discovery related properties ------------------

/-- Property 2.1: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Result: No counterexample.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    -- )->
    -- G( 
    --     ((s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName & s1.isNFDiscovered1) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );
--
/-- Property 2.2: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    insight for the property assumption: 
        P2.1 does not provide a counterexample probably because adversary discovery request update is disabled.
    Adversary Assumption: OAMs present, No adversary NF Update, adversaryDiscoveryRequest enabled. 
    Result: Default Overprivilege Attack(when requesterSnssai = none and consumer sNssais = none.)
    
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     -- & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    -- )->
    -- G(
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( -- TRUE
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 2.3: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Notable property Assumption: consumer sNssais != none at least initially.
    insight for the property assumption: 
        Let's consider consumer sNssais != none at least initially.
    Adversary Assumption: OAMs present, No adversary NF Update, adversaryDiscoveryRequest enabled. 
    Result: NFDiscovery Bypass attack (requesterSnssais != none.) 
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    -- )->
    -- G(
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );
--
/-- Property 2.4: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, No adversary NF update, adversaryDiscoveryRequest enabled. 
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Insight for the property assumption: 
        Let's enforce this check even when requesterSnssais = none
    Result: NFDiscovery Bypass attack (even when requesterSnssais = none).
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none )
    -- )->
    -- G(
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 2.5: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, No adversary NF update.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Insight for the property assumption: 
        check if the counterexample is found even if adversaryDiscoveryRequest is disabled
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     -- & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none )
    -- )->
    -- G(
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 2.6: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, allow adversary consumer update = 3 for at most once.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) & G(updateLevelConsumer1 = 3 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) & G(updateLevelConsumer2 = 3 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none )
        
    -- )->
    -- G( 
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 2.7: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, allow adversary consumer update = 3.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=3)
    --     & G(updateLevelConsumer2=3)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none )
        
    -- )->
    -- G( 
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 2.8: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, allow adversary consumer update = 2 once.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none)
    --     & X G(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
        
    -- )->
    -- G( 
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );
--
/-- Property 2.9: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, allow adversary consumer update = 2.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=2)
    --     & G(updateLevelConsumer2=2)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none )
    --     & G( s1.nfDiscoveryRequest.requesterSNssais  = s1.consumerSNssai)
    --     & X G(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
        
    -- )->
    -- G( 
    --     ((s1.isNFDiscovered1 & s1.nfDiscoveryRequest.serviceName = s1.producer1.nfService1.serviceName) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 2.10: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.   
    Adversary Assumption: OAMs present, No adversary NF update 
    Result: Default Overprivilege Attack when consumer.sNssais is empty
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
        
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );

--
/-- Property 2.11: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    
    Adversary Assumption: OAMs present, No adversary NF update, adversary discovery update enabled.
    Notable property Assumption: Consumer's sNssais should not be none anymore.
    Insight for the property assumption: 
        In P2.10, conusmer's sNssais are set None, so, let's see what happens if sNssais are not all none. also adversary discovery update is enabled.
    Result: NFDiscovery Bypass attack when requesterSnssais != none
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 2.12: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    Result: No counterexample.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.nfDiscoveryRequest.requesterSNssais != none) 
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 2.13: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    
    Adversary Assumption: OAMs present, consumer update = 3, adversary discovery update enabled.
    Notable property Assumption: Both consumer's sNssais should not be none anymore. 
        consumer update = 3 (only auth attrib update)  at most once.
    Insight for the property assumption: 
        Let's allow consumer update = 3 (only auth attrib update)  at most once
    Result: No counterexample.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) & G(updateLevelConsumer1 = 3 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) & G(updateLevelConsumer2 = 3 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.nfDiscoveryRequest.requesterSNssais != none)
        
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 2.14: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.     
    Adversary Assumption: OAMs present, consumer update = 2.
    Notable property Assumption: 
        consumer update = 2 (some charactertic attrib and auth attib update e.g. sNssais, etc.)  at most once.
    Insight for the property assumption: 
        Let's allow consumer update = 2 (only auth attrib update)  at most once
    Result: No counterexample.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.nfDiscoveryRequest.requesterSNssais != none)
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 2.15: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    Adversary Assumption: OAMs present, consumer update = 2, adversary discovery update enabled.
    Notable property Assumption: Both consumer's sNssais should not be none anymore. 
        requesterSnssais should not be empty anymore.
        consumer update = 2 (some charactertic attrib and auth attib update e.g. sNssais, etc.)  at most once.
        adversarial nfdiscovery request update enabled
    Insight for the property assumption: 
        Let's allow adversarial nfdiscovery request update.
    Result: variant of NFDiscovery Bypass Attack (requesterSNssais != none)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.nfDiscoveryRequest.requesterSNssais != none)
        
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
-- 
/-- Property 2.16: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.    
    Adversary Assumption: OAMs present, consumer update = 2, adversary discovery update enabled. 
    Notable property Assumption: Both consumer's sNssais should not be none anymore initially. 
        requesterSnssais should not be empty anymore.
        consumer update = 2 (some charactertic attrib and auth attib update e.g. sNssais, etc.)  at most once.
        adversarial nfdiscovery request update enabled
        set requesterSNssais = sNssais of the consumer.
    Insight for the property assumption: 
        P2.15 manipultate requesterSNssais. Let's stop this.
    Result: Default overprivilege Attack (Only removal of sNssais from consumer's profile is required)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     -- & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & !(s1.consumer1.sNssais[1] = none & s1.consumer1.sNssais[2] = none)
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.nfDiscoveryRequest.requesterSNssais in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]})   
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.consumer.nfInstanceId = consumer1.nfInstanceId
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
-- 
/-- Property 2.17: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    Adversary Assumption: OAMs present, No adversary NF update.
    Notable property Assumption
        Both consumer's sNssais should not be none anymore initially.
        consumer update = 2 (some charactertic attrib and auth attib update e.g. sNssais, etc.)  at most once.
    Insight for the property assumption: 
        Revert some changes. no adversarial disc req update anymore. 
    Result: Default overprivilege Attack (Similar to P2.16)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & !(s1.consumer1.sNssais[1] = none & s1.consumer1.sNssais[2] = none)
    -- )->
    -- G( 
    --     ((
    --         s1.isNFDiscovered1 
    --         & s1.consumer.nfInstanceId = consumer1.nfInstanceId
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
-- 
/-- Property 2.18: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption:
        requesterSnssais should not be empty anymore.
        consumer update = 2 (some charactertic attrib and auth attib update e.g. sNssais, etc.)  at most once.
        adversarial nfdiscovery request update enabled
        set requesterSNssais = sNssais of the consumer.
        consumer.sNssais != none at least once before nfdiscovery
    Insight for the property assumption: 
        As P2.17 makes consumer.sNssais = none again, let's consider the case when it is not none at least once.
    Result: Default overprivilege Attack (Similar to P2.16)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     -- & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & G( ( s1.nfDiscoveryRequest.isNFDiscReqValid & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) )-> s1.nfDiscoveryRequest.requesterSNssais != none )
        
    -- )->
    -- ( 
    --     X((
    --         G(s1.consumer.nfInstanceId = 1)
    --         & s1.consumer.sNssais[1] = 1 
    --         & s1.consumer.sNssais[2] = none 
    --         & producer1.nfService1.allowedsNssais[1] = 2
    --         & producer1.nfService1.allowedsNssais[2] = none
    --     ) -> G (!s1.isNFDiscovered1))
    -- );
-- 
/-- Property 2.19: 
    if consumer initial slice = 1 and producer does not allow slice 1, producer will never be discovered.    
    Adversary Assumption: OAMs present, No adversary NF update         
    Result: NFDiscovery Bypass Attack when requesterSnssais = none (similar to P2.11)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    -- )->
    -- X( 
    --     (
    --         G(s1.consumer.nfInstanceId = 1)
    --         & s1.consumer.sNssais[1] = 1 
    --         & s1.consumer.sNssais[2] = none 
    --         & producer1.nfService1.allowedsNssais[1] = 2
    --         & producer1.nfService1.allowedsNssais[2] = none
    --     ) -> G (!s1.isNFDiscovered1)
    -- );
-- 
/-- Property 2.20: 
    if consumer initial slice = 1 and producer does not allow slice 1, producer will never be discovered.
    
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption: requesterSNssais in NFDiscReq must not be none if consumer's sNssais != none
    Insight for the property assumption: 
        in P2.19, set requesterSNssais can be set empty by the consumer. let, enforce that it cannot be empty
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------other constraints---------
    --     & G( ( s1.nfDiscoveryRequest.isNFDiscReqValid & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) )-> s1.nfDiscoveryRequest.requesterSNssais != none )
    -- )->
    -- X( 
    --     (
    --         G(s1.consumer.nfInstanceId = 1)
    --         & s1.consumer.sNssais[1] = 1 
    --         & s1.consumer.sNssais[2] = none 
    --         & producer1.nfService1.allowedsNssais[1] = 2
    --         & producer1.nfService1.allowedsNssais[2] = none
    --     ) -> G (!s1.isNFDiscovered1)
    -- );
-- 
/-- Property 2.21: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption:
        requesterSnssais should not be empty anymore.
        consumer update = 2 (some charactertic attrib and auth attib update e.g. sNssais, etc.)  at most once.
        adversarial nfdiscovery request update enabled
        set requesterSNssais = sNssais of the consumer.
        consumer.sNssais != none at least once before nfdiscovery
    Insight for the property assumption: 
        As P2.17 makes consumer.sNssais = none again, let's consider the case when it is not none at least once.
    Result: Default Overprivilege attack when requesterSnssais = none (similar to P2.11)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------other constraints---------
    --     & G( ( s1.nfDiscoveryRequest.isNFDiscReqValid & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) )-> s1.nfDiscoveryRequest.requesterSNssais != none )
        
    -- )->
    -- X( 
    --     (
    --         G(s1.consumer.nfInstanceId = 1)
    --         & s1.consumer.sNssais[1] = 1 
    --         & s1.consumer.sNssais[2] = none 
    --         & producer1.nfService1.allowedsNssais[1] = 2
    --         & producer1.nfService1.allowedsNssais[2] = none
    --     ) -> G (!s1.isNFDiscovered1)
    -- );
-- 
------------------------ Access token request related properties ------------------

/-- Property 3.1: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );
--
/-- Property 3.2: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, No adversary NF Update, adversaryATRequest enabled. 
    Result: No counterexample
    
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     ------------other constraints---------
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 3.3: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Notable property Assumption: consumer sNssais != none at least initially.
    Adversary Assumption: OAMs present, No adversary NF Update, adversaryATRequest enabled. 
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 &
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );
--
/-- Property 3.4: 
    For a nf service to be discovered, consumer's serving slice info must be allowed by the producer
    Adversary Assumption: OAMs present, No adversary NF update, adversaryATRequest enabled. 
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.

    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.accessTokenRequest.requesterSNssais = none )
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 3.5: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, No adversary NF update.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.nfDiscoveryRequest.requesterSNssais = none )
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 3.6: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, allow adversary consumer update = 3 for at most once.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) & G(updateLevelConsumer1 = 3 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) & G(updateLevelConsumer2 = 3 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.accessTokenRequest.requesterSNssais = none )
        
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 3.7: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, allow adversary consumer update = 3.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=3)
    --     & G(updateLevelConsumer2=3)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.accessTokenRequest.requesterSNssais = none )
        
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 3.8: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, allow adversary consumer update = 2 once, adversaryATRequest enabled.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = none always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.accessTokenRequest.requesterSNssais = none)
    --     & X G(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
        
    -- )->
    -- G(
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> ( 
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );
--
/-- Property 3.9: 
    For an accessTokenRequest to be granted, consumer's serving slice info must be allowed by the producer.
    Adversary Assumption: OAMs present, allow adversary consumer update = 2, adversaryATRequest enabled.
    Notable property Assumption: consumer sNssais != none at least initially. requesterSnssais = consumer's sNssai always.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=2)
    --     & G(updateLevelConsumer2=2)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & (!(consumer1.sNssais[1] = none & consumer1.sNssais[2] = none))
    --     & G( s1.accessTokenRequest.requesterSNssais  = s1.consumerSNssai)
    --     & X G(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
        
    -- )->
    -- G( 
    --     ((s1.accessTokenRequest.scopeService = s1.producer1.nfService1.serviceName & s1.isServiceLevelATReqAuthorizedForProducer1) ->(
    --         (( !((s1.producer1.nfService1.allowedsNssais[1] = none) & (s1.producer1.nfService1.allowedsNssais[2] = none)) )-> (
    --             (
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
    --                     (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                     |
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
    --                         (s1.consumer.sNssais[1] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --                 & 
    --                 ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
    --                     (s1.consumer.sNssais[2] in {s1.producer1.nfService1.allowedsNssais[1], s1.producer1.nfService1.allowedsNssais[2]})
    --                 ))
    --             )
    --         ))
    --     ))
    -- );

--
/-- Property 3.10: 
    For an accessTokenRequest to be granted, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.     
    Adversary Assumption: OAMs present, No adversary NF update 
    Result: Default Overprivilege Attack when consumer.sNssais is empty
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)

    -- )->
    -- G( 
    --     ((
    --         s1.isServiceLevelATReqAuthorizedForProducer1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );

--
/-- Property 3.11: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.   
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption: Both consumer's sNssais should not be none initally.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --     )
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    -- )->
    -- G( 
    --     ((
    --         s1.isServiceLevelATReqAuthorizedForProducer1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 3.12: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.   
    Adversary Assumption: OAMs present, No adversary NF update 
    Notable property Assumption: Both consumer's sNssais is none initally, requesterSnssais not not be empty.
    Result: No counterexample

    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.accessTokenRequest.requesterSNssais != none)
        
    -- )->
    -- G( 
    --     ((
    --         s1.isServiceLevelATReqAuthorizedForProducer1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 3.13: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none. 
    Adversary Assumption: OAMs present, No adversary NF update, consumer update = 3 (only auth attrib update) at most once.
    Notable property Assumption: Both consumer's sNssais is none initally, requesterSnssais not not be empty.
    Result: No counterexample
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,3}) & G(updateLevelConsumer1 = 3 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,3}) & G(updateLevelConsumer2 = 3 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.accessTokenRequest.requesterSNssais != none)
        
    -- )->
    -- G( 
    --     ((
    --         s1.isServiceLevelATReqAuthorizedForProducer1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 3.14: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none.    
    Adversary Assumption: OAMs present, No adversary NF update, consumer update = 2 (only auth attrib update) at most once.
    Result: No counterexample.
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.accessTokenRequest.requesterSNssais != none)
        
    -- )->
    -- G( 
    --     ((
    --         s1.isServiceLevelATReqAuthorizedForProducer1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
--
/-- Property 3.15: 
    For a nf service to be discovered, consumer's serving sNssais must be allowed in 
    allowedSnssais attribute of the the producer's nfservice provided that the allowedsNssais of the producer's service is not none, adversaryATRequest enabled.
    
    Adversary Assumption: OAMs present, adversarial consumer update = 2 (only auth attrib update) at most once 
    Notable property Assumption: Both consumer's sNssais is none initally, requesterSnssais not not be empty.
    Result: No counterexample.


    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1 in {0,2}) & G(updateLevelConsumer1 = 2 -> X(G(updateLevelConsumer1 = 0)))
    --     & G(updateLevelConsumer2 in {0,2}) & G(updateLevelConsumer2 = 2 -> X(G(updateLevelConsumer2 = 0)))
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     ------------NF configuration Constraints-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     ------------other constraints---------
    --     & X(s1.consumer.nfInstanceId = consumer1.nfInstanceId)
    --     & X !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --     & G( !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none) -> s1.accessTokenRequest.requesterSNssais != none)
        
    -- )->
    -- G( 
    --     ((
    --         s1.isServiceLevelATReqAuthorizedForProducer1 
    --         & s1.producer1.nfService1.allowedsNssais[1] != none 
    --         & s1.producer1.nfService1.allowedsNssais[2] = none 
    --         ) -> (
    --             s1.producer1.nfService1.allowedsNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --     ))
    -- );
-- 

--------------------- 2-consumer-related property ------------------------
-- To test properties for 2 consumer system, uncomment line s2: protocol() in VAR section of main module.

/-- Property 4.1: 
    Resource r meant to be exclusive to a specific nfinstance C1, should not be authorized to access by other nf instances e.g. C2.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Notable property Assumption: diff consumers ask for access to the same operation.
    Result: Parameter Misuse Attack (combined with default overprivilege attack)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- (
    --     X G(   
    --         ( ( 
    --             s1.producer.nfInstanceId = s2.producer.nfInstanceId
    --             & s1.serviceRequest.operation = s2.serviceRequest.operation
    --             & ( (s1.serviceRequest.param1.isSensitive = TRUE & 
    --                 s1.serviceRequest.param1.value = s2.serviceRequest.param1.value)
    --                 | (s1.serviceRequest.param2.isSensitive = TRUE & 
    --                 s1.serviceRequest.param2.value = s2.serviceRequest.param2.value)
    --             )
    --             & s1.isServiceReqGranted & s2.isServiceReqGranted
    --         ) )
                
    --         ->(
    --             s1.consumer.nfInstanceId = s2.consumer.nfInstanceId
    --             | (
    --                 s1.consumer.sNssais[1] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s1.consumer.sNssais[2] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[2] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --             )
    --         )
    --     )
        
    -- );
--
/-- Property 4.2: 
    Resource r meant to be exclusive to a specific nfinstance C1, should not be authorized to access by other nf instances e.g. C2.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Notable property Assumption: diff consumers ask for access to the same operation, consumer's snssai cannot be none.
    insight: let's suppress previous counterexample.
    Result: Parameter Misuse Attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- (
    --     X G(   
    --         ( ( 
    --             s1.producer.nfInstanceId = s2.producer.nfInstanceId
    --             & s1.serviceRequest.operation = s2.serviceRequest.operation
    --             & ( (s1.serviceRequest.param1.isSensitive = TRUE & 
    --                 s1.serviceRequest.param1.value = s2.serviceRequest.param1.value)
    --                 | (s1.serviceRequest.param2.isSensitive = TRUE & 
    --                 s1.serviceRequest.param2.value = s2.serviceRequest.param2.value)
    --             )
    --             & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --             & !(s2.consumer.sNssais[1] = none & s2.consumer.sNssais[2] = none)
    --             & s1.isServiceReqGranted & s2.isServiceReqGranted
    --         ) )
                
    --         ->(
    --             s1.consumer.nfInstanceId = s2.consumer.nfInstanceId
    --             |( (
    --                 s1.consumer.sNssais[1] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s1.consumer.sNssais[2] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[2] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 )
                    
    --             )
    --         )
    --     )
        
    -- );
--
/-- Property 4.3: 
    Sensitive resources r meant to be exclusive to a specific nfinstance C1, should not be authorized to access by other nf instances e.g. C2.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Notable property Assumption: Diff consumers mmay ask for access to the same/diff operations, consumer's snssai cannot be none.
    insight: let's remove same operation restriction for the service requests
    Result: Parameter Misuse Attack (same as P1.2)
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- (
    --     X G(   
    --         ( ( 
    --             s1.producer.nfInstanceId = s2.producer.nfInstanceId
    --             & ( s1.serviceRequest.param1.isSensitive & s2.serviceRequest.param1.isSensitive
    --                 & s1.serviceRequest.param1.name = s2.serviceRequest.param1.name
    --                 & s1.serviceRequest.param1.value = s2.serviceRequest.param1.value
    --             )
    --             & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --             & !(s2.consumer.sNssais[1] = none & s2.consumer.sNssais[2] = none)
    --             & !(s1.producer.nfService1.allowedsNssais[1] = none & s1.producer.nfService1.allowedsNssais[2] = none)
    --             -- 

    --             & s1.isServiceReqGranted & s2.isServiceReqGranted
    --         ) )
                
    --         ->(
    --             ( ( 
    --                 s1.consumer.sNssais[1] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s1.consumer.sNssais[2] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[2] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 )
                    
    --             )
    --         )
    --     )
        
    -- );
--
/-- Property 4.4: 
    Sensitive resources r meant to be exclusive to a specific nfinstance C1, should not be authorized to access by other nf instances e.g. C2.
    Adversary Assumption: OAMs present, No adversary NF update. 
    Notable property Assumption: Diff consumers ask for access to the diff operations, consumer's snssai cannot be none. make servReqs to go for diff operations explicitly.
    insight: explicitly make the service req different
    Result: Course Scope Attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- (
    --     X G(   
    --         ( ( 
    --             s1.producer.nfInstanceId = s2.producer.nfInstanceId
    --             & s1.serviceRequest.operation != s2.serviceRequest.operation
    --             & ( s1.serviceRequest.param1.isSensitive = TRUE
    --                 & s2.serviceRequest.param1.isSensitive = TRUE
    --                 & s1.serviceRequest.param1.name = s2.serviceRequest.param1.name
    --                 & s1.serviceRequest.param1.value = s2.serviceRequest.param1.value
    --             )
    --             & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --             & !(s2.consumer.sNssais[1] = none & s2.consumer.sNssais[2] = none)
    --             & !(s1.producer.nfService1.allowedsNssais[1] = none & s1.producer.nfService1.allowedsNssais[2] = none)
    --             -- 

    --             & s1.isServiceReqGranted & s2.isServiceReqGranted
    --         ) )
                
    --         ->(
    --             ( ( 
    --                 s1.consumer.sNssais[1] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s1.consumer.sNssais[2] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[2] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 )
                    
    --             )
    --         )
    --     )
    -- );
--
/-- Property 4.5: 
    Sensitive resources r meant to be exclusive to a specific nfinstance C1, should not be authorized to access by other nf instances e.g. C2.
    Result: Course Scope Attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)

    --     & G(!updateDiscoveryRequest)
    --     & G(!updateServiceRequest)
    --     & G(!updateATRequest)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    --     & reqForSpecificProducer
    -- )->
    -- (
    --     X G(   
    --         ( ( 
    --             s1.producer.nfInstanceId = s2.producer.nfInstanceId
    --             & s1.serviceRequest.operation != s2.serviceRequest.operation
    --             & ( s1.serviceRequest.param1.isSensitive = TRUE
    --                 & s2.serviceRequest.param1.isSensitive = TRUE
    --                 & s1.serviceRequest.param1.name = s2.serviceRequest.param1.name
    --                 & s1.serviceRequest.param1.value = s2.serviceRequest.param1.value
    --             )
    --             & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --             & !(s2.consumer.sNssais[1] = none & s2.consumer.sNssais[2] = none)
    --             & !(s1.producer.nfService1.allowedsNssais[1] = none & s1.producer.nfService1.allowedsNssais[2] = none)
    --             -- 

    --             & s1.isServiceReqGranted & s2.isServiceReqGranted
    --         ) )
                
    --         ->(
    --             ( ( 
    --                 s1.consumer.sNssais[1] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s1.consumer.sNssais[2] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[2] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 )
                    
    --             )
    --         )
    --     )
    -- );
--
/-- Property 4.6: 
    Sensitive resources r meant to be exclusive to a specific nfinstance C1, should not be authorized to access by other nf instances e.g. C2.
    Result: Course Scope Attack
    --/
    -- LTLSPEC
    -- (   
    --     ------------OAM control-----------
    --     G(OAMConsumerPresent)
    --     & G(!OAMConsumer1Approve)
    --     & G(!OAMConsumer2Approve)
    --     & G(OAMProducerPresent)
    --     & G(!OAMProducer1Approve)
    --     & G(!OAMProducer2Approve)
    --     ------------adversary control---------
    --     & G(adversaryPresent)
    --     & G(!adversaryDiscoveryRequest)
    --     & G(!adversaryATRequest)
    --     & G(!adversaryServiceRequest)
    --     ------------update control---------
    --     & G(updateLevelConsumer1=0)
    --     & G(updateLevelConsumer2=0)
    --     & G(updateLevelProducer1=0)
    --     & G(updateLevelProducer2=0)
    --     ------------others-----------------
    --     & G(
    --           isNFServiceNFTypeConsistent
    --           & isOpNameOpScopeConsistent
    --           & isOpNameNFServiceNameConsistent
    --           & isOpNameParamConsistent
    --           & isOpScopeAuthAttribConsistent
    --           & isOpParamSensitivityConsistent
    --     )
    -- )->
    -- (
    --     X G(   
    --         ( ( 
    --             s1.producer.nfInstanceId = s2.producer.nfInstanceId
    --             & ( s1.serviceRequest.param1.isSensitive = TRUE
    --                 & s2.serviceRequest.param1.isSensitive = TRUE
    --                 & s1.serviceRequest.param1.name = s2.serviceRequest.param1.name
    --                 & s1.serviceRequest.param1.value = s2.serviceRequest.param1.value
    --             )
    --             & !(s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] = none)
    --             & !(s2.consumer.sNssais[1] = none & s2.consumer.sNssais[2] = none)
    --             & !(s1.producer.nfService1.allowedsNssais[1] = none & s1.producer.nfService1.allowedsNssais[2] = none)
    --             & !(s1.producer.nfService1.allowedsNssais[1] = none & s1.producer.nfService1.allowedsNssais[2] = none)

    --             & s1.isServiceReqGranted & s2.isServiceReqGranted
    --         ) )
                
    --         ->(
    --             ( ( 
    --                 s1.consumer.sNssais[1] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s1.consumer.sNssais[2] in {s2.consumer.sNssais[1], s2.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[1] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 | s2.consumer.sNssais[2] in {s1.consumer.sNssais[1], s1.consumer.sNssais[2]}
    --                 )
                    
    --             )
    --         )
    --     )
    -- );
--

DEFINE
    slice_check_for_property := 
        ((s1.serviceRequest.service = s1.producer.nfService1.serviceName & s1.isServiceReqGranted) ->(
            (( !((s1.producer.nfService1.allowedsNssais[1] = none) & (s1.producer.nfService1.allowedsNssais[2] = none)) )-> (
                (
                    (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] != none) ) -> (
                        (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                        |
                        (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                    ))
                    &
                    (( (s1.consumer.sNssais[1] != none & s1.consumer.sNssais[2] = none) ) -> (
                            (s1.consumer.sNssais[1] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                    ))
                    &
                    ((s1.consumer.sNssais[1] = none & s1.consumer.sNssais[2] != none) -> (
                        (s1.consumer.sNssais[2] in {s1.producer.nfService1.allowedsNssais[1], s1.producer.nfService1.allowedsNssais[2]})
                    ))
                )
            ))
        ));
    
    
    -- nfServiceName - nf type consistency for NF config generation
    isNFServiceNFTypeConsistent :=
          (s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName -> s1.consumer1.nfType = s1.consumer2.nfType)
        & (s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName -> s1.consumer1.nfType = s1.producer1.nfType)
        & (s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName -> s1.consumer1.nfType = s1.producer2.nfType)
        & (s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName -> s1.consumer2.nfType = s1.producer1.nfType)
        & (s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName -> s1.consumer2.nfType = s1.producer2.nfType)
        & (s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName -> s1.producer1.nfType = s1.producer2.nfType)
    ;
    -- opName - serviceName consistency for NF config generation
    isOpNameNFServiceNameConsistent :=
          ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation1.opName) 
                -> s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.consumer2.nfService1.operation2.opName) 
            -> s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation2.opName) 
                -> s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.consumer2.nfService1.operation1.opName) 
            -> s1.consumer1.nfService1.serviceName = s1.consumer2.nfService1.serviceName)

        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
                -> s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer1.nfService1.operation2.opName) 
            -> s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation2.opName) 
                -> s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer1.nfService1.operation1.opName) 
            -> s1.consumer1.nfService1.serviceName = s1.producer1.nfService1.serviceName)

        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
                -> s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) 
            -> s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) 
                -> s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) 
            -> s1.consumer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)

        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
                -> s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer1.nfService1.operation2.opName) 
            -> s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName)
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation2.opName) 
                -> s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer1.nfService1.operation1.opName) 
            -> s1.consumer2.nfService1.serviceName = s1.producer1.nfService1.serviceName)

        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
                -> s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) 
            -> s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) 
                -> s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) 
            -> s1.consumer2.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        
        & ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
                -> s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.producer1.nfService1.operation2.opName != none & s1.producer1.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) 
            -> s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) 
                -> s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
        & ((s1.producer1.nfService1.operation2.opName != none & s1.producer1.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) 
            -> s1.producer1.nfService1.serviceName = s1.producer2.nfService1.serviceName)
    ;
    -- opName - opScope2 consistency for NF config generation
    isOpNameOpScopeConsistent :=
          ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation1.opName) 
                -> s1.consumer1.nfService1.operation1.opScope2 = s1.consumer2.nfService1.operation1.opScope2)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.consumer2.nfService1.operation2.opName) 
            -> s1.consumer1.nfService1.operation2.opScope2 = s1.consumer2.nfService1.operation2.opScope2)
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation2.opName) 
                -> s1.consumer1.nfService1.operation1.opScope2 = s1.consumer2.nfService1.operation2.opScope2)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.consumer2.nfService1.operation1.opName) 
            -> s1.consumer1.nfService1.operation2.opScope2 = s1.consumer2.nfService1.operation1.opScope2)

        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
                -> s1.consumer1.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer1.nfService1.operation2.opName) 
            -> s1.consumer1.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation2.opScope2)
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation2.opName) 
                -> s1.consumer1.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation2.opScope2)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer1.nfService1.operation1.opName) 
            -> s1.consumer1.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation1.opScope2)

        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
                -> s1.consumer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) 
            -> s1.consumer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation2.opScope2)
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) 
                -> s1.consumer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation2.opScope2)
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) 
            -> s1.consumer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation1.opScope2)

        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) 
                -> s1.consumer2.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer1.nfService1.operation2.opName) 
            -> s1.consumer2.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation2.opScope2)
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation2.opName) 
                -> s1.consumer2.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation2.opScope2)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer1.nfService1.operation1.opName) 
            -> s1.consumer2.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation1.opScope2)

        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
                -> s1.consumer2.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) 
            -> s1.consumer2.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation2.opScope2)
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) 
                -> s1.consumer2.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation2.opScope2)
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) 
            -> s1.consumer2.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation1.opScope2)
        
        & ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) 
                -> s1.producer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2)
        & ((s1.producer1.nfService1.operation2.opName != none & s1.producer1.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) 
            -> s1.producer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation2.opScope2)
        & ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) 
                -> s1.producer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation2.opScope2)
        & ((s1.producer1.nfService1.operation2.opName != none & s1.producer1.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) 
            -> s1.producer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation1.opScope2)
    ;
    -- opName - Param consistency for NF config generation
    isOpNameParamConsistent := 
        -- c1 <-> c2
          ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation1.opName) -> (
              s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation1.param1.name
            & s1.consumer1.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation1.param2.name
            & s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
            & s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.consumer2.nfService1.operation2.opName) -> (
              s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation2.param1.name
            & s1.consumer1.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation2.param2.name
            & s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
            & s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.consumer2.nfService1.operation1.opName) -> (
              s1.consumer1.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation1.param1.name
            & s1.consumer1.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation1.param2.name
            & s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
            & s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.consumer2.nfService1.operation2.opName) -> (
              s1.consumer1.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation2.param1.name
            & s1.consumer1.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation2.param2.name
            & s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
            & s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        -- c1 <-> p1
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) -> (
              s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name
            & s1.consumer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation1.param2.name
            & s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
            & s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer1.nfService1.operation2.opName) -> (
              s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param1.name
            & s1.consumer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param2.name
            & s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
            & s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer1.nfService1.operation1.opName) -> (
              s1.consumer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param1.name
            & s1.consumer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param2.name
            & s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
            & s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer1.nfService1.operation2.opName) -> (
              s1.consumer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation2.param1.name
            & s1.consumer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation2.param2.name
            & s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
            & s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        -- c1 <-> p2
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) -> (
              s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name
            & s1.consumer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param2.name
            & s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
            & s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.opName != none & s1.consumer1.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) -> (
              s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name
            & s1.consumer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name
            & s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
            & s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) -> (
              s1.consumer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name
            & s1.consumer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name
            & s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
            & s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.opName != none & s1.consumer1.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) -> (
              s1.consumer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param1.name
            & s1.consumer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param2.name
            & s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
            & s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        -- c2 <-> p1
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation1.opName) -> (
              s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name
            & s1.consumer2.nfService1.operation1.param2.name = s1.producer1.nfService1.operation1.param2.name
            & s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
            & s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer1.nfService1.operation2.opName) -> (
              s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param1.name
            & s1.consumer2.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param2.name
            & s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
            & s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer1.nfService1.operation1.opName) -> (
              s1.consumer2.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param1.name
            & s1.consumer2.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param2.name
            & s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
            & s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer1.nfService1.operation2.opName) -> (
              s1.consumer2.nfService1.operation2.param1.name = s1.producer1.nfService1.operation2.param1.name
            & s1.consumer2.nfService1.operation2.param2.name = s1.producer1.nfService1.operation2.param2.name
            & s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
            & s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        -- c2 <-> p2
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) -> (
              s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name
            & s1.consumer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param2.name
            & s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
            & s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.opName != none & s1.consumer2.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) -> (
              s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name
            & s1.consumer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name
            & s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
            & s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) -> (
              s1.consumer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name
            & s1.consumer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name
            & s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
            & s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.opName != none & s1.consumer2.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) -> (
              s1.consumer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param1.name
            & s1.consumer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param2.name
            & s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
            & s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        -- p1 <-> p2
        & ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation1.opName) -> (
              s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name
            & s1.producer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param2.name
            & s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
            & s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.opName != none & s1.producer1.nfService1.operation1.opName = s1.producer2.nfService1.operation2.opName) -> (
              s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name
            & s1.producer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name
            & s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
            & s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.opName != none & s1.producer1.nfService1.operation2.opName = s1.producer2.nfService1.operation1.opName) -> (
              s1.producer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name
            & s1.producer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name
            & s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
            & s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.opName != none & s1.producer1.nfService1.operation2.opName = s1.producer2.nfService1.operation2.opName) -> (
              s1.producer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param1.name
            & s1.producer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param2.name
            & s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
            & s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
    ;
    -- opScope – allowedNFTypes and allowedNFInstances consistency
    isOpScopeAuthAttribConsistent:= 
        -- c1 <-> c2
          ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.consumer2.nfService1.operation1.opScope2) -> (
              s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.consumer2.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.consumer2.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.consumer2.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.consumer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.consumer2.nfService1.operation2.opScope2) -> (
              s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.consumer2.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.consumer2.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.consumer2.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.consumer2.nfService1.operation2.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation2.opScope2 != none & s1.consumer1.nfService1.operation2.opScope2 = s1.consumer2.nfService1.operation1.opScope2) -> (
              s1.consumer1.nfService1.operation2.allowedNFInstances[1] = s1.consumer2.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation2.allowedNFInstances[2] = s1.consumer2.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[1] = s1.consumer2.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[2] = s1.consumer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation2.opScope2 != none & s1.consumer1.nfService1.operation2.opScope2 = s1.consumer2.nfService1.operation2.opScope2) -> (
              s1.consumer1.nfService1.operation2.allowedNFInstances[1] = s1.consumer2.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation2.allowedNFInstances[2] = s1.consumer2.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[1] = s1.consumer2.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[2] = s1.consumer2.nfService1.operation2.allowedNFTypes[2]
        ))
        -- c1 <-> p1
        & ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2) -> (
              s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.producer1.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.producer1.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.producer1.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.producer1.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation2.opScope2) -> (
              s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.producer1.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.producer1.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.producer1.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.producer1.nfService1.operation2.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation2.opScope2 != none & s1.consumer1.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation1.opScope2) -> (
              s1.consumer1.nfService1.operation2.allowedNFInstances[1] = s1.producer1.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation2.allowedNFInstances[2] = s1.producer1.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[1] = s1.producer1.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[2] = s1.producer1.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation2.opScope2 != none & s1.consumer1.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation2.opScope2) -> (
              s1.consumer1.nfService1.operation2.allowedNFInstances[1] = s1.producer1.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation2.allowedNFInstances[2] = s1.producer1.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[1] = s1.producer1.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[2] = s1.producer1.nfService1.operation2.allowedNFTypes[2]
        ))
        -- c1 <-> p2
        & ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
              s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation1.opScope2 != none & s1.consumer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation2.opScope2) -> (
              s1.consumer1.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation2.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation2.opScope2 != none & s1.consumer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
              s1.consumer1.nfService1.operation2.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation2.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer1.nfService1.operation2.opScope2 != none & s1.consumer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation2.opScope2) -> (
              s1.consumer1.nfService1.operation2.allowedNFInstances[1] = s1.producer2.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer1.nfService1.operation2.allowedNFInstances[2] = s1.producer2.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[1] = s1.producer2.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer1.nfService1.operation2.allowedNFTypes[2] = s1.producer2.nfService1.operation2.allowedNFTypes[2]
        ))
        -- c2 <-> p1
        & ((s1.consumer2.nfService1.operation1.opScope2 != none & s1.consumer2.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation1.opScope2) -> (
              s1.consumer2.nfService1.operation1.allowedNFInstances[1] = s1.producer1.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation1.allowedNFInstances[2] = s1.producer1.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[1] = s1.producer1.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[2] = s1.producer1.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer2.nfService1.operation1.opScope2 != none & s1.consumer2.nfService1.operation1.opScope2 = s1.producer1.nfService1.operation2.opScope2) -> (
              s1.consumer2.nfService1.operation1.allowedNFInstances[1] = s1.producer1.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation1.allowedNFInstances[2] = s1.producer1.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[1] = s1.producer1.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[2] = s1.producer1.nfService1.operation2.allowedNFTypes[2]
        ))
        & ((s1.consumer2.nfService1.operation2.opScope2 != none & s1.consumer2.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation1.opScope2) -> (
              s1.consumer2.nfService1.operation2.allowedNFInstances[1] = s1.producer1.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation2.allowedNFInstances[2] = s1.producer1.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[1] = s1.producer1.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[2] = s1.producer1.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer2.nfService1.operation2.opScope2 != none & s1.consumer2.nfService1.operation2.opScope2 = s1.producer1.nfService1.operation2.opScope2) -> (
              s1.consumer2.nfService1.operation2.allowedNFInstances[1] = s1.producer1.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation2.allowedNFInstances[2] = s1.producer1.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[1] = s1.producer1.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[2] = s1.producer1.nfService1.operation2.allowedNFTypes[2]
        ))
        -- c2 <-> p2
        & ((s1.consumer2.nfService1.operation1.opScope2 != none & s1.consumer2.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
              s1.consumer2.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer2.nfService1.operation1.opScope2 != none & s1.consumer2.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation2.opScope2) -> (
              s1.consumer2.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation2.allowedNFTypes[2]
        ))
        & ((s1.consumer2.nfService1.operation2.opScope2 != none & s1.consumer2.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
              s1.consumer2.nfService1.operation2.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation2.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.consumer2.nfService1.operation2.opScope2 != none & s1.consumer2.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation2.opScope2) -> (
              s1.consumer2.nfService1.operation2.allowedNFInstances[1] = s1.producer2.nfService1.operation2.allowedNFInstances[1]
            & s1.consumer2.nfService1.operation2.allowedNFInstances[2] = s1.producer2.nfService1.operation2.allowedNFInstances[2]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[1] = s1.producer2.nfService1.operation2.allowedNFTypes[1]
            & s1.consumer2.nfService1.operation2.allowedNFTypes[2] = s1.producer2.nfService1.operation2.allowedNFTypes[2]
        ))
        -- p1 <-> p2
        & ((s1.producer1.nfService1.operation1.opScope2 != none & s1.producer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
              s1.producer1.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
            & s1.producer1.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
            & s1.producer1.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
            & s1.producer1.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.producer1.nfService1.operation1.opScope2 != none & s1.producer1.nfService1.operation1.opScope2 = s1.producer2.nfService1.operation2.opScope2) -> (
              s1.producer1.nfService1.operation1.allowedNFInstances[1] = s1.producer2.nfService1.operation2.allowedNFInstances[1]
            & s1.producer1.nfService1.operation1.allowedNFInstances[2] = s1.producer2.nfService1.operation2.allowedNFInstances[2]
            & s1.producer1.nfService1.operation1.allowedNFTypes[1] = s1.producer2.nfService1.operation2.allowedNFTypes[1]
            & s1.producer1.nfService1.operation1.allowedNFTypes[2] = s1.producer2.nfService1.operation2.allowedNFTypes[2]
        ))
        & ((s1.producer1.nfService1.operation2.opScope2 != none & s1.producer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation1.opScope2) -> (
              s1.producer1.nfService1.operation2.allowedNFInstances[1] = s1.producer2.nfService1.operation1.allowedNFInstances[1]
            & s1.producer1.nfService1.operation2.allowedNFInstances[2] = s1.producer2.nfService1.operation1.allowedNFInstances[2]
            & s1.producer1.nfService1.operation2.allowedNFTypes[1] = s1.producer2.nfService1.operation1.allowedNFTypes[1]
            & s1.producer1.nfService1.operation2.allowedNFTypes[2] = s1.producer2.nfService1.operation1.allowedNFTypes[2]
        ))
        & ((s1.producer1.nfService1.operation2.opScope2 != none & s1.producer1.nfService1.operation2.opScope2 = s1.producer2.nfService1.operation2.opScope2) -> (
              s1.producer1.nfService1.operation2.allowedNFInstances[1] = s1.producer2.nfService1.operation2.allowedNFInstances[1]
            & s1.producer1.nfService1.operation2.allowedNFInstances[2] = s1.producer2.nfService1.operation2.allowedNFInstances[2]
            & s1.producer1.nfService1.operation2.allowedNFTypes[1] = s1.producer2.nfService1.operation2.allowedNFTypes[1]
            & s1.producer1.nfService1.operation2.allowedNFTypes[2] = s1.producer2.nfService1.operation2.allowedNFTypes[2]
        ))
    ;
    -- Param-sensitivity consistency for NF config generation
    isOpParamSensitivityConsistent := 
        -- c1 <-> c1
          ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer1.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer1.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.consumer1.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.consumer1.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.consumer1.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.consumer1.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.consumer1.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.consumer1.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer1.nfService1.operation1.param2.isSensitive
        ))
        -- c2 <-> c2
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        -- p1 <-> p1
        & ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param2.name != none & s1.producer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param2.name != none & s1.producer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param1.name != none & s1.producer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param1.name != none & s1.producer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param2.name != none & s1.producer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param2.name != none & s1.producer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        -- p2 <-> p2
        & ((s1.producer2.nfService1.operation1.param1.name != none & s1.producer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.producer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer2.nfService1.operation1.param1.name != none & s1.producer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.producer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer2.nfService1.operation1.param2.name != none & s1.producer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.producer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer2.nfService1.operation1.param2.name != none & s1.producer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.producer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer2.nfService1.operation2.param1.name != none & s1.producer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.producer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer2.nfService1.operation2.param1.name != none & s1.producer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.producer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer2.nfService1.operation2.param2.name != none & s1.producer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.producer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer2.nfService1.operation2.param2.name != none & s1.producer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.producer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        -- c1 <-> c2
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.consumer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.consumer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.consumer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.consumer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.consumer2.nfService1.operation2.param2.isSensitive
        ))
        -- c1 <-> p1
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        -- c1 <-> p2
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param1.name != none & s1.consumer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation1.param2.name != none & s1.consumer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param1.name != none & s1.consumer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer1.nfService1.operation2.param2.name != none & s1.consumer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        -- c2 <-> p1
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer1.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer1.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer1.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer1.nfService1.operation2.param2.isSensitive
        ))
        -- c2 <-> p2
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param1.name != none & s1.consumer2.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation1.param2.name != none & s1.consumer2.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param1.name != none & s1.consumer2.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.consumer2.nfService1.operation2.param2.name != none & s1.consumer2.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.consumer2.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        -- c2 <-> p2
        & ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param1.name != none & s1.producer1.nfService1.operation1.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.producer1.nfService1.operation1.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param2.name != none & s1.producer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param2.name != none & s1.producer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param2.name != none & s1.producer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation1.param2.name != none & s1.producer1.nfService1.operation1.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.producer1.nfService1.operation1.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param1.name != none & s1.producer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param1.name != none & s1.producer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param1.name != none & s1.producer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param1.name != none & s1.producer1.nfService1.operation2.param1.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.producer1.nfService1.operation2.param1.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param2.name != none & s1.producer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param1.name) -> (
            s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param2.name != none & s1.producer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation1.param2.name) -> (
            s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation1.param2.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param2.name != none & s1.producer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param1.name) -> (
            s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param1.isSensitive
        ))
        & ((s1.producer1.nfService1.operation2.param2.name != none & s1.producer1.nfService1.operation2.param2.name = s1.producer2.nfService1.operation2.param2.name) -> (
            s1.producer1.nfService1.operation2.param2.isSensitive = s1.producer2.nfService1.operation2.param2.isSensitive
        ))
    ;

ASSIGN

    --------- environment variables ----------------
    init(reqForSpecificProducer) := {TRUE, FALSE};
    next(reqForSpecificProducer) := reqForSpecificProducer;
    
    init(consumer1.model_id) := 1;
    init(consumer1.CCA_subject) := 1;
    init(consumer1.nfInstanceId) := 1;
    init(consumer1.nfService1.serviceInstanceId) := 11;

    init(consumer2.model_id) := 2;
    init(consumer2.CCA_subject) := 2;
    init(consumer2.nfInstanceId) := 2;
    init(consumer2.nfService1.serviceInstanceId) := 21;
 
    init(producer1.model_id) := 3;
    init(producer1.CCA_subject) := 3;
    init(producer1.nfInstanceId) := 3;
    init(producer1.nfService1.serviceInstanceId) := 31;

    init(producer2.model_id) := 4;
    init(producer2.CCA_subject) := 4;
    init(producer2.nfInstanceId) := 4;
    init(producer2.nfService1.serviceInstanceId) := 41;

    next(consumer1.model_id) := consumer1.model_id;
    next(consumer1.CCA_subject) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.CCA_subject;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.CCA_subject;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.CCA_subject;
        TRUE: consumer1.CCA_subject;
    esac;
    next(consumer1.nfInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfInstanceId;
        TRUE: consumer1.nfInstanceId;
    esac;
    next(consumer1.nfType) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfType;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfType;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfType;
        TRUE: consumer1.nfType;
    esac;
    next(consumer1.nfStatus) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfStatus;
        (adversaryPresent & updateLevelConsumer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer1.nfStatus;
    esac;
    next(consumer1.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.sNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.sNssais[1];
        TRUE: consumer1.sNssais[1];
    esac;
    next(consumer1.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.sNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.sNssais[2];
        TRUE: consumer1.sNssais[2];
    esac;
    next(consumer1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.allowedNFTypes[1];
    esac;
    next(consumer1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.allowedNFTypes[2];
    esac;
    next(consumer1.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.allowedsNssais[1];
    esac;
    next(consumer1.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.allowedsNssais[2];
    esac;
    next(consumer1.load) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.load;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.load;
    esac;
    next(consumer1.capacity) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.capacity;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.capacity;
    esac;
    next(consumer1.priority) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.priority;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.priority;
    esac;

    next(consumer1.nfService1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.nfService1.allowedNFTypes[1];
    esac;
    next(consumer1.nfService1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.nfService1.allowedNFTypes[2];
    esac;
    next(consumer1.nfService1.load) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.load;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService1.load;
    esac;
    next(consumer1.nfService1.capacity) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.capacity;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService1.capacity;
    esac;
    next(consumer1.nfService1.oauth2Required) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.oauth2Required;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.oauth2Required;
        TRUE: consumer1.nfService1.oauth2Required;
    esac;
    next(consumer1.nfService1.priority) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.priority;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer1 = 3) : 0..10;
        TRUE: consumer1.nfService1.priority;
    esac;
    next(consumer1.nfService1.serviceInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 41, 11, 21, 31};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.serviceInstanceId;
        TRUE: consumer1.nfService1.serviceInstanceId;
    esac;
    next(consumer1.nfService1.serviceName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.serviceName;
        TRUE: consumer1.nfService1.serviceName;
    esac;
    next(consumer1.nfService1.serviceStatus) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.serviceStatus;
        (adversaryPresent & updateLevelConsumer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer1.nfService1.serviceStatus;
    esac;
    next(consumer1.nfService1.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.sNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.sNssais[1];
        TRUE: consumer1.nfService1.sNssais[1];
    esac;
    next(consumer1.nfService1.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.sNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.sNssais[2];
        TRUE: consumer1.nfService1.sNssais[2];
    esac;
    next(consumer1.nfService1.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.nfService1.allowedsNssais[1];
    esac;
    next(consumer1.nfService1.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3};
        TRUE: consumer1.nfService1.allowedsNssais[2];
    esac;

    next(consumer1.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer1.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(consumer1.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer1.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(consumer1.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(consumer1.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(consumer1.nfService1.operation1.opName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.opName;
        TRUE: consumer1.nfService1.operation1.opName;
    esac;
    next(consumer1.nfService1.operation1.opScope1) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.opScope1;
        TRUE: consumer1.nfService1.operation1.opScope1;
    esac;
    next(consumer1.nfService1.operation1.opScope2) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.opScope2;
        TRUE: consumer1.nfService1.operation1.opScope2;
    esac;

    next(consumer1.nfService1.operation1.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param1.isSensitive;
        TRUE: consumer1.nfService1.operation1.param1.isSensitive;
    esac;
    next(consumer1.nfService1.operation1.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param1.name;
        TRUE: consumer1.nfService1.operation1.param1.name;
    esac;
    next(consumer1.nfService1.operation1.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param1.value;
        TRUE: consumer1.nfService1.operation1.param1.value;
    esac;

    next(consumer1.nfService1.operation1.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param2.isSensitive;
        TRUE: consumer1.nfService1.operation1.param2.isSensitive;
    esac;
    next(consumer1.nfService1.operation1.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param2.name;
        TRUE: consumer1.nfService1.operation1.param2.name;
    esac;
    next(consumer1.nfService1.operation1.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation1.param2.value;
        TRUE: consumer1.nfService1.operation1.param2.value;
    esac;

    next(consumer1.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer1.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(consumer1.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer1.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(consumer1.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(consumer1.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer1.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(consumer1.nfService1.operation2.opName) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.opName;
        TRUE: consumer1.nfService1.operation2.opName;
    esac;
    next(consumer1.nfService1.operation2.opScope1) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.opScope1;
        TRUE: consumer1.nfService1.operation2.opScope1;
    esac;
    next(consumer1.nfService1.operation2.opScope2) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.opScope2;
        TRUE: consumer1.nfService1.operation2.opScope2;
    esac;

    next(consumer1.nfService1.operation2.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param1.isSensitive;
        TRUE: consumer1.nfService1.operation2.param1.isSensitive;
    esac;
    next(consumer1.nfService1.operation2.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param1.name;
        TRUE: consumer1.nfService1.operation2.param1.name;
    esac;
    next(consumer1.nfService1.operation2.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param1.value;
        TRUE: consumer1.nfService1.operation2.param1.value;
    esac;

    next(consumer1.nfService1.operation2.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param2.isSensitive;
        TRUE: consumer1.nfService1.operation2.param2.isSensitive;
    esac;
    next(consumer1.nfService1.operation2.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param2.name;
        TRUE: consumer1.nfService1.operation2.param2.name;
    esac;
    next(consumer1.nfService1.operation2.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer1Approve) : consumer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer1 = 2) : consumer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer1 = 3) : consumer1.nfService1.operation2.param2.value;
        TRUE: consumer1.nfService1.operation2.param2.value;
    esac;



    next(consumer2.model_id) := consumer2.model_id;
    next(consumer2.CCA_subject) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.CCA_subject;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.CCA_subject;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.CCA_subject;
        TRUE: consumer2.CCA_subject;
    esac;
    next(consumer2.nfInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfInstanceId;
        TRUE: consumer2.nfInstanceId;
    esac;
    next(consumer2.nfType) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfType;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfType;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfType;
        TRUE: consumer2.nfType;
    esac;
    next(consumer2.nfStatus) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfStatus;
        (adversaryPresent & updateLevelConsumer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer2.nfStatus;
    esac;
    next(consumer2.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.sNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.sNssais[1];
        TRUE: consumer2.sNssais[1];
    esac;
    next(consumer2.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.sNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.sNssais[2];
        TRUE: consumer2.sNssais[2];
    esac;
    next(consumer2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.allowedNFTypes[1];
    esac;
    next(consumer2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.allowedNFTypes[2];
    esac;
    next(consumer2.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.allowedsNssais[1];
    esac;
    next(consumer2.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.allowedsNssais[2];
    esac;
    next(consumer2.load) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.load;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.load;
    esac;
    next(consumer2.capacity) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.capacity;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.capacity;
    esac;
    next(consumer2.priority) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.priority;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.priority;
    esac;

    next(consumer2.nfService1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.nfService1.allowedNFTypes[1];
    esac;
    next(consumer2.nfService1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.nfService1.allowedNFTypes[2];
    esac;
    next(consumer2.nfService1.load) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.load;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService1.load;
    esac;
    next(consumer2.nfService1.capacity) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.capacity;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService1.capacity;
    esac;
    next(consumer2.nfService1.oauth2Required) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.oauth2Required;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.oauth2Required;
        TRUE: consumer2.nfService1.oauth2Required;
    esac;
    next(consumer2.nfService1.priority) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.priority;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 2) : 0..10;
        (adversaryPresent & updateLevelConsumer2 = 3) : 0..10;
        TRUE: consumer2.nfService1.priority;
    esac;
    next(consumer2.nfService1.serviceInstanceId) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 41, 11, 21, 31};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.serviceInstanceId;
        TRUE: consumer2.nfService1.serviceInstanceId;
    esac;
    next(consumer2.nfService1.serviceName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.serviceName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.serviceName;
        TRUE: consumer2.nfService1.serviceName;
    esac;
    next(consumer2.nfService1.serviceStatus) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.serviceStatus;
        (adversaryPresent & updateLevelConsumer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelConsumer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: consumer2.nfService1.serviceStatus;
    esac;
    next(consumer2.nfService1.sNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.sNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.sNssais[1];
        TRUE: consumer2.nfService1.sNssais[1];
    esac;
    next(consumer2.nfService1.sNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.sNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.sNssais[2];
        TRUE: consumer2.nfService1.sNssais[2];
    esac;
    next(consumer2.nfService1.allowedsNssais[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.nfService1.allowedsNssais[1];
    esac;
    next(consumer2.nfService1.allowedsNssais[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3};
        TRUE: consumer2.nfService1.allowedsNssais[2];
    esac;

    next(consumer2.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer2.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(consumer2.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer2.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(consumer2.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(consumer2.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(consumer2.nfService1.operation1.opName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.opName;
        TRUE: consumer2.nfService1.operation1.opName;
    esac;
    next(consumer2.nfService1.operation1.opScope1) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.opScope1;
        TRUE: consumer2.nfService1.operation1.opScope1;
    esac;
    next(consumer2.nfService1.operation1.opScope2) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.opScope2;
        TRUE: consumer2.nfService1.operation1.opScope2;
    esac;

    next(consumer2.nfService1.operation1.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param1.isSensitive;
        TRUE: consumer2.nfService1.operation1.param1.isSensitive;
    esac;
    next(consumer2.nfService1.operation1.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param1.name;
        TRUE: consumer2.nfService1.operation1.param1.name;
    esac;
    next(consumer2.nfService1.operation1.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param1.value;
        TRUE: consumer2.nfService1.operation1.param1.value;
    esac;

    next(consumer2.nfService1.operation1.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param2.isSensitive;
        TRUE: consumer2.nfService1.operation1.param2.isSensitive;
    esac;
    next(consumer2.nfService1.operation1.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param2.name;
        TRUE: consumer2.nfService1.operation1.param2.name;
    esac;
    next(consumer2.nfService1.operation1.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation1.param2.value;
        TRUE: consumer2.nfService1.operation1.param2.value;
    esac;

    next(consumer2.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer2.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(consumer2.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: consumer2.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(consumer2.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(consumer2.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelConsumer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: consumer2.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(consumer2.nfService1.operation2.opName) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.opName;
        TRUE: consumer2.nfService1.operation2.opName;
    esac;
    next(consumer2.nfService1.operation2.opScope1) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.opScope1;
        TRUE: consumer2.nfService1.operation2.opScope1;
    esac;
    next(consumer2.nfService1.operation2.opScope2) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.opScope2;
        TRUE: consumer2.nfService1.operation2.opScope2;
    esac;

    next(consumer2.nfService1.operation2.param1.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param1.isSensitive;
        TRUE: consumer2.nfService1.operation2.param1.isSensitive;
    esac;
    next(consumer2.nfService1.operation2.param1.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param1.name;
        TRUE: consumer2.nfService1.operation2.param1.name;
    esac;
    next(consumer2.nfService1.operation2.param1.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param1.value;
        TRUE: consumer2.nfService1.operation2.param1.value;
    esac;

    next(consumer2.nfService1.operation2.param2.isSensitive) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param2.isSensitive;
        TRUE: consumer2.nfService1.operation2.param2.isSensitive;
    esac;
    next(consumer2.nfService1.operation2.param2.name) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param2.name;
        TRUE: consumer2.nfService1.operation2.param2.name;
    esac;
    next(consumer2.nfService1.operation2.param2.value) := case
        (OAMConsumerPresent & !OAMConsumer2Approve) : consumer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 1) : 0..100;
        (adversaryPresent & updateLevelConsumer2 = 2) : consumer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelConsumer2 = 3) : consumer2.nfService1.operation2.param2.value;
        TRUE: consumer2.nfService1.operation2.param2.value;
    esac;

    next(producer1.model_id) := producer1.model_id;
    next(producer1.CCA_subject) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.CCA_subject;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.CCA_subject;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.CCA_subject;
        TRUE: producer1.CCA_subject;
    esac;
    next(producer1.nfInstanceId) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfInstanceId;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfInstanceId;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfInstanceId;
        TRUE: producer1.nfInstanceId;
    esac;
    next(producer1.nfType) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfType;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfType;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfType;
        TRUE: producer1.nfType;
    esac;
    next(producer1.nfStatus) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfStatus;
        (adversaryPresent & updateLevelProducer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer1.nfStatus;
    esac;
    next(producer1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.sNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.sNssais[1];
        TRUE: producer1.sNssais[1];
    esac;
    next(producer1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.sNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.sNssais[2];
        TRUE: producer1.sNssais[2];
    esac;
    next(producer1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.allowedNFTypes[1];
    esac;
    next(producer1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.allowedNFTypes[2];
    esac;
    next(producer1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.allowedsNssais[1];
    esac;
    next(producer1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.allowedsNssais[2];
    esac;
    next(producer1.load) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.load;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.load;
    esac;
    next(producer1.capacity) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.capacity;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.capacity;
    esac;
    next(producer1.priority) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.priority;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.priority;
    esac;

    next(producer1.nfService1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.nfService1.allowedNFTypes[1];
    esac;
    next(producer1.nfService1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.nfService1.allowedNFTypes[2];
    esac;
    next(producer1.nfService1.load) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.load;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService1.load;
    esac;
    next(producer1.nfService1.capacity) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.capacity;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService1.capacity;
    esac;
    next(producer1.nfService1.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.oauth2Required;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.oauth2Required;
        TRUE: producer1.nfService1.oauth2Required;
    esac;
    next(producer1.nfService1.priority) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.priority;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer1 = 3) : 0..10;
        TRUE: producer1.nfService1.priority;
    esac;
    next(producer1.nfService1.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 41, 11, 21, 31};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.serviceInstanceId;
        TRUE: producer1.nfService1.serviceInstanceId;
    esac;
    next(producer1.nfService1.serviceName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.serviceName;
        TRUE: producer1.nfService1.serviceName;
    esac;
    next(producer1.nfService1.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.serviceStatus;
        (adversaryPresent & updateLevelProducer1 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer1 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer1.nfService1.serviceStatus;
    esac;
    next(producer1.nfService1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.sNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.sNssais[1];
        TRUE: producer1.nfService1.sNssais[1];
    esac;
    next(producer1.nfService1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.sNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.sNssais[2];
        TRUE: producer1.nfService1.sNssais[2];
    esac;
    next(producer1.nfService1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.nfService1.allowedsNssais[1];
    esac;
    next(producer1.nfService1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3};
        TRUE: producer1.nfService1.allowedsNssais[2];
    esac;

    next(producer1.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer1.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer1.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer1.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer1.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer1.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer1.nfService1.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.opName;
        TRUE: producer1.nfService1.operation1.opName;
    esac;
    next(producer1.nfService1.operation1.opScope1) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.opScope1;
        TRUE: producer1.nfService1.operation1.opScope1;
    esac;
    next(producer1.nfService1.operation1.opScope2) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.opScope2;
        TRUE: producer1.nfService1.operation1.opScope2;
    esac;

    next(producer1.nfService1.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param1.isSensitive;
        TRUE: producer1.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer1.nfService1.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param1.name;
        TRUE: producer1.nfService1.operation1.param1.name;
    esac;
    next(producer1.nfService1.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param1.value;
        TRUE: producer1.nfService1.operation1.param1.value;
    esac;

    next(producer1.nfService1.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param2.isSensitive;
        TRUE: producer1.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer1.nfService1.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param2.name;
        TRUE: producer1.nfService1.operation1.param2.name;
    esac;
    next(producer1.nfService1.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation1.param2.value;
        TRUE: producer1.nfService1.operation1.param2.value;
    esac;

    next(producer1.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer1.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer1.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer1.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer1.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer1.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer1 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer1 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer1.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer1.nfService1.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.opName;
        TRUE: producer1.nfService1.operation2.opName;
    esac;
    next(producer1.nfService1.operation2.opScope1) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.opScope1;
        TRUE: producer1.nfService1.operation2.opScope1;
    esac;
    next(producer1.nfService1.operation2.opScope2) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.opScope2;
        TRUE: producer1.nfService1.operation2.opScope2;
    esac;

    next(producer1.nfService1.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param1.isSensitive;
        TRUE: producer1.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer1.nfService1.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param1.name;
        TRUE: producer1.nfService1.operation2.param1.name;
    esac;
    next(producer1.nfService1.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param1.value;
        TRUE: producer1.nfService1.operation2.param1.value;
    esac;

    next(producer1.nfService1.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param2.isSensitive;
        TRUE: producer1.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer1.nfService1.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer1 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param2.name;
        TRUE: producer1.nfService1.operation2.param2.name;
    esac;
    next(producer1.nfService1.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer1Approve) : producer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer1 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer1 = 2) : producer1.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer1 = 3) : producer1.nfService1.operation2.param2.value;
        TRUE: producer1.nfService1.operation2.param2.value;
    esac;


    next(producer2.model_id) := producer2.model_id;
    next(producer2.CCA_subject) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.CCA_subject;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.CCA_subject;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.CCA_subject;
        TRUE: producer2.CCA_subject;
    esac;
    next(producer2.nfInstanceId) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfInstanceId;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfInstanceId;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfInstanceId;
        TRUE: producer2.nfInstanceId;
    esac;
    next(producer2.nfType) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfType;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfType;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfType;
        TRUE: producer2.nfType;
    esac;
    next(producer2.nfStatus) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfStatus;
        (adversaryPresent & updateLevelProducer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer2.nfStatus;
    esac;
    next(producer2.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.sNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.sNssais[1];
        TRUE: producer2.sNssais[1];
    esac;
    next(producer2.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.sNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.sNssais[2];
        TRUE: producer2.sNssais[2];
    esac;
    next(producer2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.allowedNFTypes[1];
    esac;
    next(producer2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.allowedNFTypes[2];
    esac;
    next(producer2.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.allowedsNssais[1];
    esac;
    next(producer2.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.allowedsNssais[2];
    esac;
    next(producer2.load) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.load;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.load;
    esac;
    next(producer2.capacity) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.capacity;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.capacity;
    esac;
    next(producer2.priority) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.priority;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.priority;
    esac;

    next(producer2.nfService1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.nfService1.allowedNFTypes[1];
    esac;
    next(producer2.nfService1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.nfService1.allowedNFTypes[2];
    esac;
    next(producer2.nfService1.load) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.load;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService1.load;
    esac;
    next(producer2.nfService1.capacity) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.capacity;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService1.capacity;
    esac;
    next(producer2.nfService1.oauth2Required) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.oauth2Required;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.oauth2Required;
        TRUE: producer2.nfService1.oauth2Required;
    esac;
    next(producer2.nfService1.priority) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.priority;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 2) : 0..10;
        (adversaryPresent & updateLevelProducer2 = 3) : 0..10;
        TRUE: producer2.nfService1.priority;
    esac;
    next(producer2.nfService1.serviceInstanceId) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 41, 11, 21, 31};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.serviceInstanceId;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.serviceInstanceId;
        TRUE: producer2.nfService1.serviceInstanceId;
    esac;
    next(producer2.nfService1.serviceName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.serviceName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.serviceName;
        TRUE: producer2.nfService1.serviceName;
    esac;
    next(producer2.nfService1.serviceStatus) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.serviceStatus;
        (adversaryPresent & updateLevelProducer2 = 1) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 2) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        (adversaryPresent & updateLevelProducer2 = 3) : {REGISTERED, SUSPENDED, UNDISCOVERABLE};
        TRUE: producer2.nfService1.serviceStatus;
    esac;
    next(producer2.nfService1.sNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.sNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.sNssais[1];
        TRUE: producer2.nfService1.sNssais[1];
    esac;
    next(producer2.nfService1.sNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.sNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.sNssais[2];
        TRUE: producer2.nfService1.sNssais[2];
    esac;
    next(producer2.nfService1.allowedsNssais[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedsNssais[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.nfService1.allowedsNssais[1];
    esac;
    next(producer2.nfService1.allowedsNssais[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.allowedsNssais[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3};
        TRUE: producer2.nfService1.allowedsNssais[2];
    esac;

    next(producer2.nfService1.operation1.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer2.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer2.nfService1.operation1.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer2.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer2.nfService1.operation1.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer2.nfService1.operation1.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer2.nfService1.operation1.opName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.opName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.opName;
        TRUE: producer2.nfService1.operation1.opName;
    esac;
    next(producer2.nfService1.operation1.opScope1) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.opScope1;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.opScope1;
        TRUE: producer2.nfService1.operation1.opScope1;
    esac;
    next(producer2.nfService1.operation1.opScope2) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.opScope2;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.opScope2;
        TRUE: producer2.nfService1.operation1.opScope2;
    esac;

    next(producer2.nfService1.operation1.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param1.isSensitive;
        TRUE: producer2.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer2.nfService1.operation1.param1.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param1.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param1.name;
        TRUE: producer2.nfService1.operation1.param1.name;
    esac;
    next(producer2.nfService1.operation1.param1.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param1.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param1.value;
        TRUE: producer2.nfService1.operation1.param1.value;
    esac;

    next(producer2.nfService1.operation1.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param2.isSensitive;
        TRUE: producer2.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer2.nfService1.operation1.param2.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param2.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param2.name;
        TRUE: producer2.nfService1.operation1.param2.name;
    esac;
    next(producer2.nfService1.operation1.param2.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation1.param2.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation1.param2.value;
        TRUE: producer2.nfService1.operation1.param2.value;
    esac;


    next(producer2.nfService1.operation2.allowedNFInstances[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFInstances[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer2.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer2.nfService1.operation2.allowedNFInstances[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFInstances[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, 1, 2, 3, 4,5};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, 1, 2, 3, 4,5};
        TRUE: producer2.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer2.nfService1.operation2.allowedNFTypes[1]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFTypes[1];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer2.nfService1.operation2.allowedNFTypes[2]) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.allowedNFTypes[2];
        (adversaryPresent & updateLevelProducer2 = 1) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 2) : {none, nf_1, nf_2, nf_3, nf_4};
        (adversaryPresent & updateLevelProducer2 = 3) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: producer2.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer2.nfService1.operation2.opName) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.opName;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.opName;
        TRUE: producer2.nfService1.operation2.opName;
    esac;
    next(producer2.nfService1.operation2.opScope1) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, service_1, service_2, service_3, service_4};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.opScope1;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.opScope1;
        TRUE: producer2.nfService1.operation2.opScope1;
    esac;
    next(producer2.nfService1.operation2.opScope2) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.opScope2;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.opScope2;
        TRUE: producer2.nfService1.operation2.opScope2;
    esac;

    next(producer2.nfService1.operation2.param1.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param1.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param1.isSensitive;
        TRUE: producer2.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer2.nfService1.operation2.param1.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param1.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param1.name;
        TRUE: producer2.nfService1.operation2.param1.name;
    esac;
    next(producer2.nfService1.operation2.param1.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param1.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param1.value;
        TRUE: producer2.nfService1.operation2.param1.value;
    esac;

    next(producer2.nfService1.operation2.param2.isSensitive) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 1) : {TRUE, FALSE};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param2.isSensitive;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param2.isSensitive;
        TRUE: producer2.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer2.nfService1.operation2.param2.name) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer2 = 1) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param2.name;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param2.name;
        TRUE: producer2.nfService1.operation2.param2.name;
    esac;
    next(producer2.nfService1.operation2.param2.value) := case
        (OAMProducerPresent & !OAMProducer2Approve) : producer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer2 = 1) : 0..100;
        (adversaryPresent & updateLevelProducer2 = 2) : producer2.nfService1.operation2.param2.value;
        (adversaryPresent & updateLevelProducer2 = 3) : producer2.nfService1.operation2.param2.value;
        TRUE: producer2.nfService1.operation2.param2.value;
    esac;




MODULE protocol(consumer1,consumer2,producer1,producer2,reqForSpecificProducer,OAMConsumerPresent,OAMProducerPresent,OAMConsumer1Approve,OAMConsumer2Approve,OAMProducer1Approve,OAMProducer2Approve,updateConsumer1,updateConsumer2,benignUpdateConsumer,updateProducer1,updateProducer2,benignUpdateProducer,adversaryPresent,adversaryUpdateConsumer1,adversaryUpdateConsumer2,adversaryUpdateProducer1,adversaryUpdateProducer2,adversaryDiscoveryRequest,adversaryATRequest,adversaryServiceRequest,updateDiscoveryRequest,updateATRequest,updateServiceRequest,disableOptionalParams_AT)


VAR
    --------- Structures ----------------
    consumer : NF;
    producer : NF;
    prod_at_consumer : NF;
    
    nfDiscoveryRequest: NFDiscoveryRequest; 
    accessTokenRequest : AccessTokenRequest(reqForSpecificProducer);
    accessToken : AccessToken(reqForSpecificProducer);
    serviceRequest: ServiceRequest;

    --------- State variable ----------------
    initConsumer: boolean;
    initDiscoveryRequest: boolean;
    initProducer: boolean;
    initATRequest: boolean;
    initServiceRequest: boolean;

    -- random variable for choosing consumers and producers from multiple candidates
    selectProducer : 1..2;
    selectConsumer : 1..2;
    selectConsumerSNssai: boolean;
    selectOperation: boolean;


    
DEFINE
    foundNF := isNFDiscovered1 | isNFDiscovered2;

    isNFDiscovered1 := case
        nfDiscoveryRequest.isNFDiscReqValid
        & consumer.isNFInstanceValid
        & producer1.isNFInstanceValid
        
        & nfDiscoveryRequest.requesterID != producer1.nfInstanceId

        & nfDiscoveryRequest.targetNFType = producer1.nfType

        & (
            (nfDiscoveryRequest.targetNfInstanceId != none)->
                nfDiscoveryRequest.targetNfInstanceId = producer1.nfInstanceId
        )
        & ((nfDiscoveryRequest.serviceName = none) ->
            (   
                producer1.nfService1.isServiceInstanceValid
                &
                (( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
                        (nfDiscoveryRequest.requesterNFType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
                ))
                &
                ((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
                    (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                            (nfDiscoveryRequest.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                    )) 
                ))
                &
                (
                    (  
                        (nfDiscoveryRequest.sNssais != none & ( !(producer1.nfService1.sNssais[1] = none & producer1.nfService1.sNssais[2] = none) ) )->
                            nfDiscoveryRequest.sNssais in {producer1.nfService1.sNssais[1], producer1.nfService1.sNssais[2]}
                    )
                    & ( 
                        (nfDiscoveryRequest.sNssais != none & ( producer1.nfService1.sNssais[1] = none & producer1.nfService1.sNssais[2] = none ) & ( !(producer1.sNssais[1] = none & producer1.sNssais[2] = none) ))->
                            nfDiscoveryRequest.sNssais in {producer1.sNssais[1], producer1.sNssais[2]}
                    )
                )
                & (
                    (   
                        (nfDiscoveryRequest.requesterSNssais != none & ( !(producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) ) )->
                            nfDiscoveryRequest.requesterSNssais in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]}
                    )
                    & ( 
                        (nfDiscoveryRequest.requesterSNssais != none & ( producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none ) & ( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ))->
                            nfDiscoveryRequest.requesterSNssais in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]}
                    )
                )
            )
        )

        & ( (nfDiscoveryRequest.serviceName != none)-> 
            (
                (nfDiscoveryRequest.serviceName in {producer1.nfService1.serviceName})
                &
                (nfDiscoveryRequest.serviceName = producer1.nfService1.serviceName ->
                    (   
                        producer1.nfService1.isServiceInstanceValid
                        &
                        (( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
                                (nfDiscoveryRequest.requesterNFType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
                        ))
                        &
                        ((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
                            (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                                    (nfDiscoveryRequest.requesterNFType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                            ))
                        ))
                        &
                        (
                            (
                                (nfDiscoveryRequest.sNssais != none & ( !(producer1.nfService1.sNssais[1] = none & producer1.nfService1.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer1.nfService1.sNssais[1], producer1.nfService1.sNssais[2]}
                            )
                            & (
                                (nfDiscoveryRequest.sNssais != none & ( producer1.nfService1.sNssais[1] = none & producer1.nfService1.sNssais[2] = none ) & ( !(producer1.sNssais[1] = none & producer1.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer1.sNssais[1], producer1.sNssais[2]}
                            )
                        )
                        & (
                            (
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]}
                            )
                            & (
                                (nfDiscoveryRequest.requesterSNssais != none & ( producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none ) & ( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.requesterSNssais in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]}
                            )
                        )
                    )
                ) 
            )  
        )
            : TRUE;
        TRUE: FALSE;
    esac;

    isNFDiscovered2 := case
        nfDiscoveryRequest.isNFDiscReqValid
        & consumer.isNFInstanceValid
        & producer2.isNFInstanceValid

        & nfDiscoveryRequest.requesterID != producer2.nfInstanceId

        & nfDiscoveryRequest.targetNFType = producer2.nfType

        & (
            (nfDiscoveryRequest.targetNfInstanceId != none)->
                nfDiscoveryRequest.targetNfInstanceId = producer2.nfInstanceId
        )
        & ((nfDiscoveryRequest.serviceName = none) ->
            (   
                producer2.nfService1.isServiceInstanceValid
                &
                (( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
                        (nfDiscoveryRequest.requesterNFType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
                ))
                &
                ((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
                    (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                            (nfDiscoveryRequest.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                    )) 
                ))
                &
                (
                    (
                        (nfDiscoveryRequest.sNssais != none & ( !(producer2.nfService1.sNssais[1] = none & producer2.nfService1.sNssais[2] = none) ) )->
                            nfDiscoveryRequest.sNssais in {producer2.nfService1.sNssais[1], producer2.nfService1.sNssais[2]}
                    )
                    & ( 
                        (nfDiscoveryRequest.sNssais != none & ( producer2.nfService1.sNssais[1] = none & producer2.nfService1.sNssais[2] = none ) & ( !(producer2.sNssais[1] = none & producer2.sNssais[2] = none) ))->
                            nfDiscoveryRequest.sNssais in {producer2.sNssais[1], producer2.sNssais[2]}
                    )
                )
                & (
                    (  
                        (nfDiscoveryRequest.requesterSNssais != none & ( !(producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) ) )->
                            nfDiscoveryRequest.requesterSNssais in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]}
                    )
                    & ( 
                        (nfDiscoveryRequest.requesterSNssais != none & ( producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none ) & ( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ))->
                            nfDiscoveryRequest.requesterSNssais in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]}
                    )
                )
            )
        )

        & ( (nfDiscoveryRequest.serviceName != none)-> 
            (
                (nfDiscoveryRequest.serviceName in {producer2.nfService1.serviceName})
                &
                (nfDiscoveryRequest.serviceName = producer2.nfService1.serviceName ->
                    (   
                        producer2.nfService1.isServiceInstanceValid
                        &
                        (( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
                                (nfDiscoveryRequest.requesterNFType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
                        ))
                        &
                        ((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
                            (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                                    (nfDiscoveryRequest.requesterNFType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                            )) 
                        ))
                        &
                        (
                            (   
                                (nfDiscoveryRequest.sNssais != none & ( !(producer2.nfService1.sNssais[1] = none & producer2.nfService1.sNssais[2] = none) ) )->
                                    nfDiscoveryRequest.sNssais in {producer2.nfService1.sNssais[1], producer2.nfService1.sNssais[2]}
                            )
                            & ( 
                                (nfDiscoveryRequest.sNssais != none & ( producer2.nfService1.sNssais[1] = none & producer2.nfService1.sNssais[2] = none ) & ( !(producer2.sNssais[1] = none & producer2.sNssais[2] = none) ))->
                                    nfDiscoveryRequest.sNssais in {producer2.sNssais[1], producer2.sNssais[2]}
                            )
                        )
                        & (
                            (   
                                (nfDiscoveryRequest.requesterSNssais != none & ( !(producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) ) )->
                                    nfDiscoveryRequest.requesterSNssais in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]}
                            )
                            & ( 
                                (nfDiscoveryRequest.requesterSNssais != none & ( producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none ) & ( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ))->
                                    nfDiscoveryRequest.requesterSNssais in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]}
                            )
                        )
                    )
                ) 
            )  
        )
            : TRUE;
        TRUE: FALSE;
    esac;

    --------------------- Validate Access Token Request-----------------
    isAccessTokenReqAuthorized := case
        reqForSpecificProducer &  isServiceLevelATReqAuthorizedForSpecificProducer : TRUE;
        !reqForSpecificProducer &  (isServiceLevelATReqAuthorizedForProducer1 | isServiceLevelATReqAuthorizedForProducer2 ) : TRUE;
        TRUE: FALSE;
    esac;
    isOpLevelATReqAuthorized := case
        reqForSpecificProducer &  isOpLevelATReqAuthorizedForSpecificProducer : TRUE;
        !reqForSpecificProducer &  (isOpLevelATReqAuthorizedForProducer1 | isOpLevelATReqAuthorizedForProducer2 ) : TRUE;
        TRUE: FALSE;
    esac;
   
    isServiceLevelATReqAuthorizedForSpecificProducer := case
        (
            reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer.isNFInstanceValid
            & consumer.isNFInstanceValid
            & (accessTokenRequest.nfInstanceId != accessTokenRequest.targetNfInstanceId)
            
            & (accessTokenRequest.targetNfInstanceId = producer.nfInstanceId)
            & (accessTokenRequest.scopeService in {producer.nfService1.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)

            &
            ((accessTokenRequest.scopeService = producer.nfService1.serviceName) -> (
                (producer.nfService1.isServiceInstanceValid)
                &
                (( !(producer.nfService1.allowedNFTypes[1] = none & producer.nfService1.allowedNFTypes[2] = none) )-> (
                        (consumer.nfType in {producer.nfService1.allowedNFTypes[1], producer.nfService1.allowedNFTypes[2]})
                ))
                &
                ((producer.nfService1.allowedNFTypes[1] = none & producer.nfService1.allowedNFTypes[2] = none) -> (
                    (( !(producer.allowedNFTypes[1] = none & producer.allowedNFTypes[2] = none) ) -> (
                            (consumer.nfType in {producer.allowedNFTypes[1], producer.allowedNFTypes[2]})
                    ))
                ))
                & 
                (( !(producer.nfService1.allowedsNssais[1] = none & producer.nfService1.allowedsNssais[2] = none) )-> (
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                        ))
                        &
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer.nfService1.allowedsNssais[1], producer.nfService1.allowedsNssais[2]})
                        ))
                    )
                    
                ))
                & 
                ((producer.nfService1.allowedsNssais[1] = none & producer.nfService1.allowedsNssais[2] = none) -> (
                    (( !(producer.allowedsNssais[1] = none & producer.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer.allowedsNssais[1], producer.allowedsNssais[2]})
                            ))
                        )
                    ))
                ))
            ))
        )
            : TRUE;
        TRUE : FALSE;
    esac;

    isServiceLevelATReqAuthorizedForProducer1 := case
        (
            !reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer1.isNFInstanceValid
            & consumer.isNFInstanceValid
            & (accessTokenRequest.nfInstanceId != producer1.nfInstanceId)

            & (accessTokenRequest.targetNFType = producer1.nfType)
            & (accessTokenRequest.scopeService in {producer1.nfService1.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)

            &
            ((accessTokenRequest.scopeService = producer1.nfService1.serviceName) -> (
                (producer1.nfService1.isServiceInstanceValid)
                &
                (( !(producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) )-> (
                        (consumer.nfType in {producer1.nfService1.allowedNFTypes[1], producer1.nfService1.allowedNFTypes[2]})
                ))
                &
                ((producer1.nfService1.allowedNFTypes[1] = none & producer1.nfService1.allowedNFTypes[2] = none) -> (
                    (( !(producer1.allowedNFTypes[1] = none & producer1.allowedNFTypes[2] = none) ) -> (
                            (consumer.nfType in {producer1.allowedNFTypes[1], producer1.allowedNFTypes[2]})
                    )) 
                ))
                &
                (( !(producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) )-> (
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer1.nfService1.allowedsNssais[1], producer1.nfService1.allowedsNssais[2]})
                        ))
                    )
                ))
                &
                ((producer1.nfService1.allowedsNssais[1] = none & producer1.nfService1.allowedsNssais[2] = none) -> (
                    (( !(producer1.allowedsNssais[1] = none & producer1.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer1.allowedsNssais[1], producer1.allowedsNssais[2]})
                            ))
                        )
                    ))
                ))
            ))
        )
            : TRUE;
        TRUE : FALSE;
    esac;

    isServiceLevelATReqAuthorizedForProducer2 := case
        (
            !reqForSpecificProducer
            & accessTokenRequest.isATReqValid
            & producer2.isNFInstanceValid
            & consumer.isNFInstanceValid
            & (accessTokenRequest.nfInstanceId != producer2.nfInstanceId)

            & (accessTokenRequest.targetNFType = producer2.nfType)
            & (accessTokenRequest.scopeService in {producer2.nfService1.serviceName})
            & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)

            &
            ((accessTokenRequest.scopeService = producer2.nfService1.serviceName) -> (
                (producer2.nfService1.isServiceInstanceValid)
                &
                (( !(producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) )-> (
                        (consumer.nfType in {producer2.nfService1.allowedNFTypes[1], producer2.nfService1.allowedNFTypes[2]})
                ))
                &
                ((producer2.nfService1.allowedNFTypes[1] = none & producer2.nfService1.allowedNFTypes[2] = none) -> (
                    (( !(producer2.allowedNFTypes[1] = none & producer2.allowedNFTypes[2] = none) ) -> (
                            (consumer.nfType in {producer2.allowedNFTypes[1], producer2.allowedNFTypes[2]})
                    )) 
                ))
                &
                (( !(producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) )-> (
                    (
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                            (consumer.sNssais[1] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                            |
                            (consumer.sNssais[2] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                        ))
                        & 
                        (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                             (consumer.sNssais[1] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                        ))
                        &
                        ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                            (consumer.sNssais[2] in {producer2.nfService1.allowedsNssais[1], producer2.nfService1.allowedsNssais[2]})
                        ))
                    )
                ))
                &
                ((producer2.nfService1.allowedsNssais[1] = none & producer2.nfService1.allowedsNssais[2] = none) -> (
                    (( !(producer2.allowedsNssais[1] = none & producer2.allowedsNssais[2] = none) ) ->(
                        (
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] != none) ) -> (
                                (consumer.sNssais[1] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                                |
                                (consumer.sNssais[2] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            & 
                            (( (consumer.sNssais[1] != none & consumer.sNssais[2] = none) ) -> (
                                (consumer.sNssais[1] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                            &
                            ((consumer.sNssais[1] = none & consumer.sNssais[2] != none) -> (
                                (consumer.sNssais[2] in {producer2.allowedsNssais[1], producer2.allowedsNssais[2]})
                            ))
                        )
                    ))
                ))
            ))
        )
            : TRUE;
        TRUE : FALSE;
    esac;

    isOpLevelATReqAuthorizedForSpecificProducer := case
    (
        reqForSpecificProducer
        & isServiceLevelATReqAuthorizedForSpecificProducer

        & accessTokenRequest.isATReqValid
        & producer.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != accessTokenRequest.targetNfInstanceId)
        
        & (accessTokenRequest.targetNfInstanceId = producer.nfInstanceId)
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
        
        & accessTokenRequest.scopeOperation != none
        &
        (accessTokenRequest.scopeOperation in {producer.nfService1.operation1.opScope2, producer.nfService1.operation2.opScope2})

        & 
        ((accessTokenRequest.scopeOperation = producer.nfService1.operation1.opScope2) -> (
            producer.nfService1.operation1.isOperationValid
            &
            (
                (!( producer.nfService1.operation1.allowedNFInstances[1] = none & producer.nfService1.operation1.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer.nfService1.operation1.allowedNFInstances[1], producer.nfService1.operation1.allowedNFInstances[2]})
            )
        ))

        &
        ((accessTokenRequest.scopeOperation = producer.nfService1.operation2.opScope2) -> (
            producer.nfService1.operation2.isOperationValid
            &
            (
                (!( producer.nfService1.operation2.allowedNFInstances[1] = none & producer.nfService1.operation2.allowedNFInstances[2] = none))
                & (consumer.nfInstanceId in {producer.nfService1.operation2.allowedNFInstances[1], producer.nfService1.operation2.allowedNFInstances[2]})
            )
        ))
 
    )
        : TRUE;
    TRUE : FALSE;
    esac;
    
    isOpLevelATReqAuthorizedForProducer1 := case
    (
        !reqForSpecificProducer
        & isServiceLevelATReqAuthorizedForProducer1

        & accessTokenRequest.isATReqValid
        & producer1.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != producer1.nfInstanceId)
            
        & (accessTokenRequest.targetNFType = producer1.nfType)
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
        
        & accessTokenRequest.scopeOperation != none
        &
        (accessTokenRequest.scopeOperation in {producer1.nfService1.operation1.opScope2, producer1.nfService1.operation2.opScope2})

        &
        ((accessTokenRequest.scopeOperation = producer1.nfService1.operation1.opScope2) -> (
            producer1.nfService1.operation1.isOperationValid
            &
            (
                (!(producer1.nfService1.operation1.allowedNFTypes[1] = none & producer1.nfService1.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer1.nfService1.operation1.allowedNFTypes[1], producer1.nfService1.operation1.allowedNFTypes[2]})
            )
        ))
        &
        ((accessTokenRequest.scopeOperation = producer1.nfService1.operation2.opScope2) -> (
            producer1.nfService1.operation2.isOperationValid
            &
            (
                (!(producer1.nfService1.operation2.allowedNFTypes[1] = none & producer1.nfService1.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer1.nfService1.operation2.allowedNFTypes[1], producer1.nfService1.operation2.allowedNFTypes[2]})
            )
        ))     
    )
        : TRUE;
    TRUE : FALSE;
    esac;
    
    isOpLevelATReqAuthorizedForProducer2 := case
    (
        !reqForSpecificProducer
        & isServiceLevelATReqAuthorizedForProducer2

        & accessTokenRequest.isATReqValid
        & producer2.isNFInstanceValid
        & consumer.isNFInstanceValid
        & (accessTokenRequest.nfInstanceId != producer2.nfInstanceId)
            
        & (accessTokenRequest.targetNFType = producer2.nfType)
        & (accessTokenRequest.nfInstanceId = consumer.nfInstanceId)
        
        & accessTokenRequest.scopeOperation != none
        &
        (accessTokenRequest.scopeOperation in {producer2.nfService1.operation1.opScope2, producer2.nfService1.operation2.opScope2})

        &
        ((accessTokenRequest.scopeOperation = producer2.nfService1.operation1.opScope2) -> (
            producer2.nfService1.operation1.isOperationValid
            &
            (
                (!(producer2.nfService1.operation1.allowedNFTypes[1] = none & producer2.nfService1.operation1.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer2.nfService1.operation1.allowedNFTypes[1], producer2.nfService1.operation1.allowedNFTypes[2]})
            )
        ))
        &
        ((accessTokenRequest.scopeOperation = producer2.nfService1.operation2.opScope2) -> (
            producer2.nfService1.operation2.isOperationValid
            &
            (
                (!(producer2.nfService1.operation2.allowedNFTypes[1] = none & producer2.nfService1.operation2.allowedNFTypes[2] = none))
                & ( consumer.nfType in {producer2.nfService1.operation2.allowedNFTypes[1], producer2.nfService1.operation2.allowedNFTypes[2]})
            )
        ))     
    )
        : TRUE;
    TRUE : FALSE;
    esac;
    
    isServiceReqGranted := 
    case
        consumer.isNFInstanceValid
        & producer.isNFInstanceValid
        & accessToken.isTokenValid
        & serviceRequest.isServiceRequestValid

        & serviceRequest.subjectID = accessToken.sub
        & serviceRequest.subjectID = consumer.nfInstanceId
        & serviceRequest.audienceID = producer.nfInstanceId
        & ((reqForSpecificProducer) -> (accessToken.aud_NFInstanceId = producer.nfInstanceId))
        & ((!reqForSpecificProducer) -> (accessToken.aud_NFType = producer.nfType))
        & serviceRequest.service = accessToken.scopeService
        & (
            (producer.nfService1.isServiceInstanceValid & serviceRequest.service = producer.nfService1.serviceName))
        & serviceRequest.operation in {producer.nfService1.operation1.opName, producer.nfService1.operation2.opName}
        & ( 
            (serviceRequest.operation = producer.nfService1.operation1.opName) -> (
                producer.nfService1.operation1.isOperationValid
                & serviceRequest.service = producer.nfService1.serviceName
                & producer.nfService1.isServiceInstanceValid
                &
                ((producer.nfService1.operation1.opScope1 != none) -> (
                    serviceRequest.service = producer.nfService1.operation1.opScope1
                ))
                &
                ((producer.nfService1.operation1.opScope1 = none) -> (
                    serviceRequest.service = producer.nfService1.serviceName
                ))
                & 
                ((producer.nfService1.operation1.opScope2 != none) -> (
                    accessToken.scopeOperation = producer.nfService1.operation1.opScope2
                ))  
            )
        )
        & ( 
            (serviceRequest.operation = producer.nfService1.operation2.opName) -> (
                producer.nfService1.operation2.isOperationValid
                & serviceRequest.service = producer.nfService1.serviceName
                & producer.nfService1.isServiceInstanceValid
                &
                ((producer.nfService1.operation2.opScope1 != none) -> (
                    serviceRequest.service = producer.nfService1.operation2.opScope1
                ))
                &
                ((producer.nfService1.operation2.opScope1 = none) -> (
                    serviceRequest.service = producer.nfService1.serviceName
                ))
                & 
                ((producer.nfService1.operation2.opScope2 != none) -> (
                    accessToken.scopeOperation = producer.nfService1.operation2.opScope2
                )) 
            )
        )
        & ((serviceRequest.sNssais != none) ->(
                serviceRequest.sNssais in {producer.sNssais[1], producer.sNssais[2]}
            )
        )
            : TRUE;
        TRUE: FALSE; -- isServiceReqGranted;
    esac;
    
    isOperationParametersAuthorized:=
    case
        serviceRequest.operation = producer.nfService1.operation1.opName & producer.nfService1.operation1.isParamVerified : TRUE;
        serviceRequest.operation = producer.nfService1.operation2.opName & producer.nfService1.operation2.isParamVerified : TRUE;
        TRUE: FALSE;
    esac;

    consumerSNssai := 
    case
        consumer.sNssais[1] != none & consumer.sNssais[2] != none & selectConsumerSNssai : consumer.sNssais[1];
        consumer.sNssais[1] != none & consumer.sNssais[2] != none & !selectConsumerSNssai : consumer.sNssais[2];
        consumer.sNssais[1] != none :  consumer.sNssais[1];
        consumer.sNssais[2] != none :  consumer.sNssais[2];
        TRUE: none;
    esac;

ASSIGN
---------- random (environment) variable --------------------
    selectOperation := 
    case
        prod_at_consumer.nfService1.operation1.isOperationValid & prod_at_consumer.nfService1.operation2.isOperationValid :  {TRUE, FALSE};
        prod_at_consumer.nfService1.operation1.isOperationValid :  TRUE;
        prod_at_consumer.nfService1.operation2.isOperationValid :  FALSE;
        TRUE: FALSE;
    esac;
---------- init variables ----------
    init(initConsumer) := FALSE;
    next(initConsumer) := consumer.model_id = 0 ? TRUE: initConsumer;
    init(initProducer) := FALSE;
    next(initProducer) := (producer.model_id = 0 & (isNFDiscovered1 | isNFDiscovered2)) ? TRUE: initProducer;
    
    init(initDiscoveryRequest) := FALSE;
    next(initDiscoveryRequest) := case
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : TRUE;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : TRUE;
        TRUE: initDiscoveryRequest;
    esac;
    
    init(initATRequest) := FALSE;
    next(initATRequest) := case
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest): TRUE;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : TRUE;
        TRUE : initATRequest;
    esac;
    
    init(initServiceRequest) := FALSE;
    next(initServiceRequest) := (!initServiceRequest & initConsumer & initProducer & accessToken.isTokenValid) ? TRUE : initServiceRequest;
---------- consumer selection : any of consumer1 and consumer2 --------------------
    init(consumer.model_id) := 0;
    init(consumer.CCA_subject) := none;
    init(consumer.nfInstanceId) := none;
    init(consumer.nfType) := none;
    init(consumer.nfStatus) := none;
    init(consumer.sNssais[1]) := none;
    init(consumer.sNssais[2]) := none;
    init(consumer.allowedNFTypes[1]) := none;
    init(consumer.allowedNFTypes[2]) := none;
    init(consumer.allowedsNssais[1]) := none;
    init(consumer.allowedsNssais[2]) := none;
    init(consumer.load) := 0;
    init(consumer.capacity) := 0;
    init(consumer.priority) := 0;
    init(consumer.nfService1.allowedNFTypes[1]) := none;
    init(consumer.nfService1.allowedNFTypes[2]) := none;
    init(consumer.nfService1.load) := 0;
    init(consumer.nfService1.capacity) := 0;
    init(consumer.nfService1.oauth2Required) := FALSE;
    init(consumer.nfService1.priority) := 0;
    init(consumer.nfService1.serviceInstanceId) := none;
    init(consumer.nfService1.serviceName) := none;
    init(consumer.nfService1.serviceStatus) := none;
    init(consumer.nfService1.sNssais[1]) := none;
    init(consumer.nfService1.sNssais[2]) := none;
    init(consumer.nfService1.allowedsNssais[1]) := none;
    init(consumer.nfService1.allowedsNssais[2]) := none;
    init(consumer.nfService1.operation1.allowedNFInstances[1]) := none;
    init(consumer.nfService1.operation1.allowedNFInstances[2]) := none;
    init(consumer.nfService1.operation1.allowedNFTypes[1]) := none;
    init(consumer.nfService1.operation1.allowedNFTypes[2]) := none;
    init(consumer.nfService1.operation1.opName) := none;
    init(consumer.nfService1.operation1.opScope1) := none;
    init(consumer.nfService1.operation1.opScope2) := none;
    init(consumer.nfService1.operation1.param1.isSensitive) := FALSE;
    init(consumer.nfService1.operation1.param1.name) := none;
    init(consumer.nfService1.operation1.param1.value) := 0;
    init(consumer.nfService1.operation1.param2.isSensitive) := FALSE;
    init(consumer.nfService1.operation1.param2.name) := none;
    init(consumer.nfService1.operation1.param2.value) := 0;
    init(consumer.nfService1.operation2.allowedNFInstances[1]) := none;
    init(consumer.nfService1.operation2.allowedNFInstances[2]) := none;
    init(consumer.nfService1.operation2.allowedNFTypes[1]) := none;
    init(consumer.nfService1.operation2.allowedNFTypes[2]) := none;
    init(consumer.nfService1.operation2.opName) := none;
    init(consumer.nfService1.operation2.opScope1) := none;
    init(consumer.nfService1.operation2.opScope2) := none;
    init(consumer.nfService1.operation2.param1.isSensitive) := FALSE;
    init(consumer.nfService1.operation2.param1.name) := none;
    init(consumer.nfService1.operation2.param1.value) := 0;
    init(consumer.nfService1.operation2.param2.isSensitive) := FALSE;
    init(consumer.nfService1.operation2.param2.name) := none;
    init(consumer.nfService1.operation2.param2.value) := 0;

---------- consumer NF update -----------------
    next(consumer.model_id) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.model_id;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.model_id;
        (consumer.model_id = consumer1.model_id) : consumer1.model_id;
        (consumer.model_id = consumer2.model_id) : consumer2.model_id;
        TRUE : consumer.model_id;
    esac;
    next(consumer.CCA_subject) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.CCA_subject;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.CCA_subject;
        (consumer.model_id = consumer1.model_id) : consumer1.CCA_subject;
        (consumer.model_id = consumer2.model_id) : consumer2.CCA_subject;
        TRUE : consumer.CCA_subject;
    esac;
    next(consumer.nfInstanceId) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfInstanceId;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfInstanceId;
        (consumer.model_id = consumer1.model_id) : consumer1.nfInstanceId;
        (consumer.model_id = consumer2.model_id) : consumer2.nfInstanceId;
        TRUE : consumer.nfInstanceId;
    esac;
    next(consumer.nfType) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfType;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfType;
        (consumer.model_id = consumer1.model_id) : consumer1.nfType;
        (consumer.model_id = consumer2.model_id) : consumer2.nfType;
        TRUE : consumer.nfType;
    esac;
    next(consumer.nfStatus) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfStatus;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfStatus;
        (consumer.model_id = consumer1.model_id) : consumer1.nfStatus;
        (consumer.model_id = consumer2.model_id) : consumer2.nfStatus;
        TRUE : consumer.nfStatus;
    esac;
    next(consumer.sNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.sNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.sNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.sNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.sNssais[1];
        TRUE : consumer.sNssais[1];
    esac;
    next(consumer.sNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.sNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.sNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.sNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.sNssais[2];
        TRUE : consumer.sNssais[2];
    esac;
    next(consumer.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedNFTypes[1];
        TRUE : consumer.allowedNFTypes[1];
    esac;
    next(consumer.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedNFTypes[2];
        TRUE : consumer.allowedNFTypes[2];
    esac;
    next(consumer.allowedsNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedsNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedsNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedsNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedsNssais[1];
        TRUE : consumer.allowedsNssais[1];
    esac;
    next(consumer.allowedsNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.allowedsNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.allowedsNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.allowedsNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.allowedsNssais[2];
        TRUE : consumer.allowedsNssais[2];
    esac;
    next(consumer.load) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.load;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.load;
        (consumer.model_id = consumer1.model_id) : consumer1.load;
        (consumer.model_id = consumer2.model_id) : consumer2.load;
        TRUE : consumer.load;
    esac;
    next(consumer.capacity) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.capacity;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.capacity;
        (consumer.model_id = consumer1.model_id) : consumer1.capacity;
        (consumer.model_id = consumer2.model_id) : consumer2.capacity;
        TRUE : consumer.capacity;
    esac;
    next(consumer.priority) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.priority;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.priority;
        (consumer.model_id = consumer1.model_id) : consumer1.priority;
        (consumer.model_id = consumer2.model_id) : consumer2.priority;
        TRUE : consumer.priority;
    esac;
    next(consumer.nfService1.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedNFTypes[1];
        TRUE : consumer.nfService1.allowedNFTypes[1];
    esac;
    next(consumer.nfService1.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedNFTypes[2];
        TRUE : consumer.nfService1.allowedNFTypes[2];
    esac;
    next(consumer.nfService1.load) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.load;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.load;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.load;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.load;
        TRUE : consumer.nfService1.load;
    esac;
    next(consumer.nfService1.capacity) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.capacity;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.capacity;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.capacity;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.capacity;
        TRUE : consumer.nfService1.capacity;
    esac;
    next(consumer.nfService1.oauth2Required) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.oauth2Required;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.oauth2Required;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.oauth2Required;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.oauth2Required;
        TRUE : consumer.nfService1.oauth2Required;
    esac;
    next(consumer.nfService1.priority) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.priority;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.priority;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.priority;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.priority;
        TRUE : consumer.nfService1.priority;
    esac;
    next(consumer.nfService1.serviceInstanceId) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceInstanceId;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceInstanceId;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceInstanceId;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceInstanceId;
        TRUE : consumer.nfService1.serviceInstanceId;
    esac;
    next(consumer.nfService1.serviceName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceName;
        TRUE : consumer.nfService1.serviceName;
    esac;
    next(consumer.nfService1.serviceStatus) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.serviceStatus;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.serviceStatus;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.serviceStatus;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.serviceStatus;
        TRUE : consumer.nfService1.serviceStatus;
    esac;
    next(consumer.nfService1.sNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.sNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.sNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.sNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.sNssais[1];
        TRUE : consumer.nfService1.sNssais[1];
    esac;
    next(consumer.nfService1.sNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.sNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.sNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.sNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.sNssais[2];
        TRUE : consumer.nfService1.sNssais[2];
    esac;
    next(consumer.nfService1.allowedsNssais[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedsNssais[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedsNssais[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedsNssais[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedsNssais[1];
        TRUE : consumer.nfService1.allowedsNssais[1];
    esac;
    next(consumer.nfService1.allowedsNssais[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.allowedsNssais[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.allowedsNssais[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.allowedsNssais[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.allowedsNssais[2];
        TRUE : consumer.nfService1.allowedsNssais[2];
    esac;
    next(consumer.nfService1.operation1.allowedNFInstances[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFInstances[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFInstances[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFInstances[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFInstances[1];
        TRUE : consumer.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(consumer.nfService1.operation1.allowedNFInstances[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFInstances[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFInstances[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFInstances[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFInstances[2];
        TRUE : consumer.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(consumer.nfService1.operation1.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFTypes[1];
        TRUE : consumer.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(consumer.nfService1.operation1.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.allowedNFTypes[2];
        TRUE : consumer.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(consumer.nfService1.operation1.opName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opName;
        TRUE : consumer.nfService1.operation1.opName;
    esac;
    next(consumer.nfService1.operation1.opScope1) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opScope1;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opScope1;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opScope1;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opScope1;
        TRUE : consumer.nfService1.operation1.opScope1;
    esac;
    next(consumer.nfService1.operation1.opScope2) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.opScope2;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.opScope2;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.opScope2;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.opScope2;
        TRUE : consumer.nfService1.operation1.opScope2;
    esac;
    next(consumer.nfService1.operation1.param1.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.isSensitive;
        TRUE : consumer.nfService1.operation1.param1.isSensitive;
    esac;
    next(consumer.nfService1.operation1.param1.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.name;
        TRUE : consumer.nfService1.operation1.param1.name;
    esac;
    next(consumer.nfService1.operation1.param1.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param1.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param1.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param1.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param1.value;
        TRUE : consumer.nfService1.operation1.param1.value;
    esac;
    next(consumer.nfService1.operation1.param2.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param2.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param2.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param2.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param2.isSensitive;
        TRUE : consumer.nfService1.operation1.param2.isSensitive;
    esac;
    next(consumer.nfService1.operation1.param2.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param2.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param2.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param2.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param2.name;
        TRUE : consumer.nfService1.operation1.param2.name;
    esac;
    next(consumer.nfService1.operation1.param2.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation1.param2.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation1.param2.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation1.param2.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation1.param2.value;
        TRUE : consumer.nfService1.operation1.param2.value;
    esac;
    next(consumer.nfService1.operation2.allowedNFInstances[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFInstances[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFInstances[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFInstances[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFInstances[1];
        TRUE : consumer.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(consumer.nfService1.operation2.allowedNFInstances[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFInstances[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFInstances[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFInstances[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFInstances[2];
        TRUE : consumer.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(consumer.nfService1.operation2.allowedNFTypes[1]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFTypes[1];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFTypes[1];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFTypes[1];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFTypes[1];
        TRUE : consumer.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(consumer.nfService1.operation2.allowedNFTypes[2]) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.allowedNFTypes[2];
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.allowedNFTypes[2];
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.allowedNFTypes[2];
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.allowedNFTypes[2];
        TRUE : consumer.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(consumer.nfService1.operation2.opName) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.opName;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.opName;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.opName;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.opName;
        TRUE : consumer.nfService1.operation2.opName;
    esac;
    next(consumer.nfService1.operation2.opScope1) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.opScope1;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.opScope1;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.opScope1;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.opScope1;
        TRUE : consumer.nfService1.operation2.opScope1;
    esac;
    next(consumer.nfService1.operation2.opScope2) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.opScope2;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.opScope2;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.opScope2;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.opScope2;
        TRUE : consumer.nfService1.operation2.opScope2;
    esac;
    next(consumer.nfService1.operation2.param1.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param1.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param1.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param1.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param1.isSensitive;
        TRUE : consumer.nfService1.operation2.param1.isSensitive;
    esac;
    next(consumer.nfService1.operation2.param1.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param1.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param1.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param1.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param1.name;
        TRUE : consumer.nfService1.operation2.param1.name;
    esac;
    next(consumer.nfService1.operation2.param1.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param1.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param1.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param1.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param1.value;
        TRUE : consumer.nfService1.operation2.param1.value;
    esac;
    next(consumer.nfService1.operation2.param2.isSensitive) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param2.isSensitive;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param2.isSensitive;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param2.isSensitive;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param2.isSensitive;
        TRUE : consumer.nfService1.operation2.param2.isSensitive;
    esac;
    next(consumer.nfService1.operation2.param2.name) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param2.name;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param2.name;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param2.name;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param2.name;
        TRUE : consumer.nfService1.operation2.param2.name;
    esac;
    next(consumer.nfService1.operation2.param2.value) := case 
        (consumer.model_id = 0 & selectConsumer = 1) : consumer1.nfService1.operation2.param2.value;
        (consumer.model_id = 0 & selectConsumer = 2) : consumer2.nfService1.operation2.param2.value;
        (consumer.model_id = consumer1.model_id) : consumer1.nfService1.operation2.param2.value;
        (consumer.model_id = consumer2.model_id) : consumer2.nfService1.operation2.param2.value;
        TRUE : consumer.nfService1.operation2.param2.value;
    esac;

---------- begin NFDiscoveryRequest init ----------
    init(nfDiscoveryRequest.requesterID) := none;
    init(nfDiscoveryRequest.targetNFType) := none;
    init(nfDiscoveryRequest.requesterNFType) := none;
    init(nfDiscoveryRequest.sNssais) := none;
    init(nfDiscoveryRequest.serviceName) := none;
    init(nfDiscoveryRequest.targetNfInstanceId) := none;
    init(nfDiscoveryRequest.requesterSNssais) := none;

---------- begin NFDiscoveryRequest next ----------
    next(nfDiscoveryRequest.requesterID) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3, 4,5};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : consumer.nfInstanceId;
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & accessToken.isTokenValid & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfInstanceId;
        TRUE: nfDiscoveryRequest.requesterID;
    esac;
    next(nfDiscoveryRequest.targetNFType) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : accessToken.aud_NFType;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : accessToken.aud_NFType;
        TRUE: nfDiscoveryRequest.targetNFType;
    esac;
    next(nfDiscoveryRequest.requesterNFType) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : consumer.nfType;
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfType;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : consumer.nfType;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumer.nfType;
        TRUE: nfDiscoveryRequest.requesterNFType;
    esac;
    next(nfDiscoveryRequest.sNssais) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, 1, 2, 3};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : {none, 1, 2, 3};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, 1, 2, 3};
        TRUE: nfDiscoveryRequest.sNssais;
    esac;
    next(nfDiscoveryRequest.serviceName) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, service_1, service_2, service_3, service_4};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, service_1, service_2, service_3, service_4};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, service_1, service_2, service_3, service_4};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : accessToken.scopeService;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : accessToken.scopeService;
        TRUE: nfDiscoveryRequest.serviceName;
    esac;
    next(nfDiscoveryRequest.targetNfInstanceId) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3, 4,5};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : {none, producer1.nfInstanceId, producer2.nfInstanceId};
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, producer1.nfInstanceId, producer2.nfInstanceId};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : {none, 1, 2, 3, 4,5};
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : {none, 1, 2, 3, 4,5};
        TRUE: nfDiscoveryRequest.targetNfInstanceId;
    esac;
    next(nfDiscoveryRequest.requesterSNssais) := case
        (initConsumer & adversaryPresent & adversaryDiscoveryRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & !initDiscoveryRequest) : consumerSNssai;
        (reqForSpecificProducer & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumerSNssai;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & !initDiscoveryRequest) : consumerSNssai;
        (!reqForSpecificProducer & accessToken.isTokenValid & initConsumer & initDiscoveryRequest & updateDiscoveryRequest) : consumerSNssai;
        TRUE: nfDiscoveryRequest.requesterSNssais;
    esac;
---------- begin producer init ----------
    init(producer.model_id) := 0;
    init(producer.CCA_subject) := none;
    init(producer.nfInstanceId) := none;
    init(producer.nfType) := none;
    init(producer.nfStatus) := none;
    init(producer.sNssais[1]) := none;
    init(producer.sNssais[2]) := none;
    init(producer.allowedNFTypes[1]) := none;
    init(producer.allowedNFTypes[2]) := none;
    init(producer.allowedsNssais[1]) := none;
    init(producer.allowedsNssais[2]) := none;
    init(producer.load) := 0;
    init(producer.capacity) := 0;
    init(producer.priority) := 0;
    init(producer.nfService1.allowedNFTypes[1]) := none;
    init(producer.nfService1.allowedNFTypes[2]) := none;
    init(producer.nfService1.load) := 0;
    init(producer.nfService1.capacity) := 0;
    init(producer.nfService1.oauth2Required) := FALSE;
    init(producer.nfService1.priority) := 0;
    init(producer.nfService1.serviceInstanceId) := none;
    init(producer.nfService1.serviceName) := none;
    init(producer.nfService1.serviceStatus) := none;
    init(producer.nfService1.sNssais[1]) := none;
    init(producer.nfService1.sNssais[2]) := none;
    init(producer.nfService1.allowedsNssais[1]) := none;
    init(producer.nfService1.allowedsNssais[2]) := none;
    init(producer.nfService1.operation1.allowedNFInstances[1]) := none;
    init(producer.nfService1.operation1.allowedNFInstances[2]) := none;
    init(producer.nfService1.operation1.allowedNFTypes[1]) := none;
    init(producer.nfService1.operation1.allowedNFTypes[2]) := none;
    init(producer.nfService1.operation1.opName) := none;
    init(producer.nfService1.operation1.opScope1) := none;
    init(producer.nfService1.operation1.opScope2) := none;
    init(producer.nfService1.operation1.param1.isSensitive) := FALSE;
    init(producer.nfService1.operation1.param1.name) := none;
    init(producer.nfService1.operation1.param1.value) := 0;
    init(producer.nfService1.operation1.param2.isSensitive) := FALSE;
    init(producer.nfService1.operation1.param2.name) := none;
    init(producer.nfService1.operation1.param2.value) := 0;
    init(producer.nfService1.operation2.allowedNFInstances[1]) := none;
    init(producer.nfService1.operation2.allowedNFInstances[2]) := none;
    init(producer.nfService1.operation2.allowedNFTypes[1]) := none;
    init(producer.nfService1.operation2.allowedNFTypes[2]) := none;
    init(producer.nfService1.operation2.opName) := none;
    init(producer.nfService1.operation2.opScope1) := none;
    init(producer.nfService1.operation2.opScope2) := none;
    init(producer.nfService1.operation2.param1.isSensitive) := FALSE;
    init(producer.nfService1.operation2.param1.name) := none;
    init(producer.nfService1.operation2.param1.value) := 0;
    init(producer.nfService1.operation2.param2.isSensitive) := FALSE;
    init(producer.nfService1.operation2.param2.name) := none;
    init(producer.nfService1.operation2.param2.value) := 0;
---------- begin producer next ----------
    next(producer.model_id) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.model_id;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.model_id;
        (isNFDiscovered1) : producer1.model_id;
        (isNFDiscovered2) : producer2.model_id;
        (producer.model_id = producer1.model_id) : producer1.model_id;
        (producer.model_id = producer2.model_id) : producer2.model_id;
        TRUE : producer.model_id;
    esac;
    next(producer.CCA_subject) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.CCA_subject;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.CCA_subject;
        (isNFDiscovered1) : producer1.CCA_subject;
        (isNFDiscovered2) : producer2.CCA_subject;
        (producer.model_id = producer1.model_id) : producer1.CCA_subject;
        (producer.model_id = producer2.model_id) : producer2.CCA_subject;
        TRUE : producer.CCA_subject;
    esac;
    next(producer.nfInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfInstanceId;
        (isNFDiscovered1) : producer1.nfInstanceId;
        (isNFDiscovered2) : producer2.nfInstanceId;
        (producer.model_id = producer1.model_id) : producer1.nfInstanceId;
        (producer.model_id = producer2.model_id) : producer2.nfInstanceId;
        TRUE : producer.nfInstanceId;
    esac;
    next(producer.nfType) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfType;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfType;
        (isNFDiscovered1) : producer1.nfType;
        (isNFDiscovered2) : producer2.nfType;
        (producer.model_id = producer1.model_id) : producer1.nfType;
        (producer.model_id = producer2.model_id) : producer2.nfType;
        TRUE : producer.nfType;
    esac;
    next(producer.nfStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfStatus;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfStatus;
        (isNFDiscovered1) : producer1.nfStatus;
        (isNFDiscovered2) : producer2.nfStatus;
        (producer.model_id = producer1.model_id) : producer1.nfStatus;
        (producer.model_id = producer2.model_id) : producer2.nfStatus;
        TRUE : producer.nfStatus;
    esac;
    next(producer.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.sNssais[1];
        (isNFDiscovered1) : producer1.sNssais[1];
        (isNFDiscovered2) : producer2.sNssais[1];
        (producer.model_id = producer1.model_id) : producer1.sNssais[1];
        (producer.model_id = producer2.model_id) : producer2.sNssais[1];
        TRUE : producer.sNssais[1];
    esac;
    next(producer.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.sNssais[2];
        (isNFDiscovered1) : producer1.sNssais[2];
        (isNFDiscovered2) : producer2.sNssais[2];
        (producer.model_id = producer1.model_id) : producer1.sNssais[2];
        (producer.model_id = producer2.model_id) : producer2.sNssais[2];
        TRUE : producer.sNssais[2];
    esac;
    next(producer.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.allowedNFTypes[1];
        TRUE : producer.allowedNFTypes[1];
    esac;
    next(producer.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.allowedNFTypes[2];
        TRUE : producer.allowedNFTypes[2];
    esac;
    next(producer.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedsNssais[1];
        (isNFDiscovered1) : producer1.allowedsNssais[1];
        (isNFDiscovered2) : producer2.allowedsNssais[1];
        (producer.model_id = producer1.model_id) : producer1.allowedsNssais[1];
        (producer.model_id = producer2.model_id) : producer2.allowedsNssais[1];
        TRUE : producer.allowedsNssais[1];
    esac;
    next(producer.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedsNssais[2];
        (isNFDiscovered1) : producer1.allowedsNssais[2];
        (isNFDiscovered2) : producer2.allowedsNssais[2];
        (producer.model_id = producer1.model_id) : producer1.allowedsNssais[2];
        (producer.model_id = producer2.model_id) : producer2.allowedsNssais[2];
        TRUE : producer.allowedsNssais[2];
    esac;
    next(producer.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.load;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.load;
        (isNFDiscovered1) : producer1.load;
        (isNFDiscovered2) : producer2.load;
        (producer.model_id = producer1.model_id) : producer1.load;
        (producer.model_id = producer2.model_id) : producer2.load;
        TRUE : producer.load;
    esac;
    next(producer.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.capacity;
        (isNFDiscovered1) : producer1.capacity;
        (isNFDiscovered2) : producer2.capacity;
        (producer.model_id = producer1.model_id) : producer1.capacity;
        (producer.model_id = producer2.model_id) : producer2.capacity;
        TRUE : producer.capacity;
    esac;
    next(producer.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.priority;
        (isNFDiscovered1) : producer1.priority;
        (isNFDiscovered2) : producer2.priority;
        (producer.model_id = producer1.model_id) : producer1.priority;
        (producer.model_id = producer2.model_id) : producer2.priority;
        TRUE : producer.priority;
    esac;
    next(producer.nfService1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService1.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedNFTypes[1];
        TRUE : producer.nfService1.allowedNFTypes[1];
    esac;
    next(producer.nfService1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService1.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedNFTypes[2];
        TRUE : producer.nfService1.allowedNFTypes[2];
    esac;
    next(producer.nfService1.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.load;
        (isNFDiscovered1) : producer1.nfService1.load;
        (isNFDiscovered2) : producer2.nfService1.load;
        (producer.model_id = producer1.model_id) : producer1.nfService1.load;
        (producer.model_id = producer2.model_id) : producer2.nfService1.load;
        TRUE : producer.nfService1.load;
    esac;
    next(producer.nfService1.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.capacity;
        (isNFDiscovered1) : producer1.nfService1.capacity;
        (isNFDiscovered2) : producer2.nfService1.capacity;
        (producer.model_id = producer1.model_id) : producer1.nfService1.capacity;
        (producer.model_id = producer2.model_id) : producer2.nfService1.capacity;
        TRUE : producer.nfService1.capacity;
    esac;
    next(producer.nfService1.oauth2Required) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.oauth2Required;
        (isNFDiscovered1) : producer1.nfService1.oauth2Required;
        (isNFDiscovered2) : producer2.nfService1.oauth2Required;
        (producer.model_id = producer1.model_id) : producer1.nfService1.oauth2Required;
        (producer.model_id = producer2.model_id) : producer2.nfService1.oauth2Required;
        TRUE : producer.nfService1.oauth2Required;
    esac;
    next(producer.nfService1.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.priority;
        (isNFDiscovered1) : producer1.nfService1.priority;
        (isNFDiscovered2) : producer2.nfService1.priority;
        (producer.model_id = producer1.model_id) : producer1.nfService1.priority;
        (producer.model_id = producer2.model_id) : producer2.nfService1.priority;
        TRUE : producer.nfService1.priority;
    esac;
    next(producer.nfService1.serviceInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered1) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered2) : producer2.nfService1.serviceInstanceId;
        (producer.model_id = producer1.model_id) : producer1.nfService1.serviceInstanceId;
        (producer.model_id = producer2.model_id) : producer2.nfService1.serviceInstanceId;
        TRUE : producer.nfService1.serviceInstanceId;
    esac;
    next(producer.nfService1.serviceName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.serviceName;
        (isNFDiscovered1) : producer1.nfService1.serviceName;
        (isNFDiscovered2) : producer2.nfService1.serviceName;
        (producer.model_id = producer1.model_id) : producer1.nfService1.serviceName;
        (producer.model_id = producer2.model_id) : producer2.nfService1.serviceName;
        TRUE : producer.nfService1.serviceName;
    esac;
    next(producer.nfService1.serviceStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.serviceStatus;
        (isNFDiscovered1) : producer1.nfService1.serviceStatus;
        (isNFDiscovered2) : producer2.nfService1.serviceStatus;
        (producer.model_id = producer1.model_id) : producer1.nfService1.serviceStatus;
        (producer.model_id = producer2.model_id) : producer2.nfService1.serviceStatus;
        TRUE : producer.nfService1.serviceStatus;
    esac;
    next(producer.nfService1.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.sNssais[1];
        (isNFDiscovered1) : producer1.nfService1.sNssais[1];
        (isNFDiscovered2) : producer2.nfService1.sNssais[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.sNssais[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.sNssais[1];
        TRUE : producer.nfService1.sNssais[1];
    esac;
    next(producer.nfService1.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.sNssais[2];
        (isNFDiscovered1) : producer1.nfService1.sNssais[2];
        (isNFDiscovered2) : producer2.nfService1.sNssais[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.sNssais[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.sNssais[2];
        TRUE : producer.nfService1.sNssais[2];
    esac;
    next(producer.nfService1.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered1) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered2) : producer2.nfService1.allowedsNssais[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedsNssais[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedsNssais[1];
        TRUE : producer.nfService1.allowedsNssais[1];
    esac;
    next(producer.nfService1.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered1) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered2) : producer2.nfService1.allowedsNssais[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.allowedsNssais[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.allowedsNssais[2];
        TRUE : producer.nfService1.allowedsNssais[2];
    esac;
    next(producer.nfService1.operation1.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFInstances[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFInstances[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFInstances[1];
        TRUE : producer.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(producer.nfService1.operation1.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFInstances[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFInstances[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFInstances[2];
        TRUE : producer.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(producer.nfService1.operation1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFTypes[1];
        TRUE : producer.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(producer.nfService1.operation1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService1.operation1.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.allowedNFTypes[2];
        TRUE : producer.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(producer.nfService1.operation1.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.opName;
        (isNFDiscovered1) : producer1.nfService1.operation1.opName;
        (isNFDiscovered2) : producer2.nfService1.operation1.opName;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opName;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opName;
        TRUE : producer.nfService1.operation1.opName;
    esac;
    next(producer.nfService1.operation1.opScope1) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.opScope1;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.opScope1;
        (isNFDiscovered1) : producer1.nfService1.operation1.opScope1;
        (isNFDiscovered2) : producer2.nfService1.operation1.opScope1;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opScope1;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opScope1;
        TRUE : producer.nfService1.operation1.opScope1;
    esac;
    next(producer.nfService1.operation1.opScope2) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.opScope2;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.opScope2;
        (isNFDiscovered1) : producer1.nfService1.operation1.opScope2;
        (isNFDiscovered2) : producer2.nfService1.operation1.opScope2;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.opScope2;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.opScope2;
        TRUE : producer.nfService1.operation1.opScope2;
    esac;
    next(producer.nfService1.operation1.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation1.param1.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.isSensitive;
        TRUE : producer.nfService1.operation1.param1.isSensitive;
    esac;
    next(producer.nfService1.operation1.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered1) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered2) : producer2.nfService1.operation1.param1.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.name;
        TRUE : producer.nfService1.operation1.param1.name;
    esac;
    next(producer.nfService1.operation1.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered1) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered2) : producer2.nfService1.operation1.param1.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param1.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param1.value;
        TRUE : producer.nfService1.operation1.param1.value;
    esac;
    next(producer.nfService1.operation1.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation1.param2.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param2.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param2.isSensitive;
        TRUE : producer.nfService1.operation1.param2.isSensitive;
    esac;
    next(producer.nfService1.operation1.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered1) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered2) : producer2.nfService1.operation1.param2.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param2.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param2.name;
        TRUE : producer.nfService1.operation1.param2.name;
    esac;
    next(producer.nfService1.operation1.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered1) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered2) : producer2.nfService1.operation1.param2.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation1.param2.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation1.param2.value;
        TRUE : producer.nfService1.operation1.param2.value;
    esac;
    next(producer.nfService1.operation2.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFInstances[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFInstances[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFInstances[1];
        TRUE : producer.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(producer.nfService1.operation2.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFInstances[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFInstances[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFInstances[2];
        TRUE : producer.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(producer.nfService1.operation2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFTypes[1];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFTypes[1];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFTypes[1];
        TRUE : producer.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(producer.nfService1.operation2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.nfService1.operation2.allowedNFTypes[2];
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.allowedNFTypes[2];
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.allowedNFTypes[2];
        TRUE : producer.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(producer.nfService1.operation2.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.opName;
        (isNFDiscovered1) : producer1.nfService1.operation2.opName;
        (isNFDiscovered2) : producer2.nfService1.operation2.opName;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.opName;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.opName;
        TRUE : producer.nfService1.operation2.opName;
    esac;
    next(producer.nfService1.operation2.opScope1) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.opScope1;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.opScope1;
        (isNFDiscovered1) : producer1.nfService1.operation2.opScope1;
        (isNFDiscovered2) : producer2.nfService1.operation2.opScope1;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.opScope1;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.opScope1;
        TRUE : producer.nfService1.operation2.opScope1;
    esac;
    next(producer.nfService1.operation2.opScope2) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.opScope2;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.opScope2;
        (isNFDiscovered1) : producer1.nfService1.operation2.opScope2;
        (isNFDiscovered2) : producer2.nfService1.operation2.opScope2;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.opScope2;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.opScope2;
        TRUE : producer.nfService1.operation2.opScope2;
    esac;
    next(producer.nfService1.operation2.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation2.param1.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param1.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param1.isSensitive;
        TRUE : producer.nfService1.operation2.param1.isSensitive;
    esac;
    next(producer.nfService1.operation2.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered1) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered2) : producer2.nfService1.operation2.param1.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param1.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param1.name;
        TRUE : producer.nfService1.operation2.param1.name;
    esac;
    next(producer.nfService1.operation2.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered1) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered2) : producer2.nfService1.operation2.param1.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param1.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param1.value;
        TRUE : producer.nfService1.operation2.param1.value;
    esac;
    next(producer.nfService1.operation2.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered2) : producer2.nfService1.operation2.param2.isSensitive;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param2.isSensitive;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param2.isSensitive;
        TRUE : producer.nfService1.operation2.param2.isSensitive;
    esac;
    next(producer.nfService1.operation2.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered1) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered2) : producer2.nfService1.operation2.param2.name;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param2.name;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param2.name;
        TRUE : producer.nfService1.operation2.param2.name;
    esac;
    next(producer.nfService1.operation2.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered1) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered2) : producer2.nfService1.operation2.param2.value;
        (producer.model_id = producer1.model_id) : producer1.nfService1.operation2.param2.value;
        (producer.model_id = producer2.model_id) : producer2.nfService1.operation2.param2.value;
        TRUE : producer.nfService1.operation2.param2.value;
    esac;

    init(prod_at_consumer.model_id) := 0;
    init(prod_at_consumer.CCA_subject) := none;
    init(prod_at_consumer.nfInstanceId) := none;
    init(prod_at_consumer.nfType) := none;
    init(prod_at_consumer.nfStatus) := none;
    init(prod_at_consumer.sNssais[1]) := none;
    init(prod_at_consumer.sNssais[2]) := none;
    init(prod_at_consumer.allowedNFTypes[1]) := none;
    init(prod_at_consumer.allowedNFTypes[2]) := none;
    init(prod_at_consumer.allowedsNssais[1]) := none;
    init(prod_at_consumer.allowedsNssais[2]) := none;
    init(prod_at_consumer.load) := 0;
    init(prod_at_consumer.capacity) := 0;
    init(prod_at_consumer.priority) := 0;
    init(prod_at_consumer.nfService1.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService1.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService1.load) := 0;
    init(prod_at_consumer.nfService1.capacity) := 0;
    init(prod_at_consumer.nfService1.oauth2Required) := FALSE;
    init(prod_at_consumer.nfService1.priority) := 0;
    init(prod_at_consumer.nfService1.serviceInstanceId) := none;
    init(prod_at_consumer.nfService1.serviceName) := none;
    init(prod_at_consumer.nfService1.serviceStatus) := none;
    init(prod_at_consumer.nfService1.sNssais[1]) := none;
    init(prod_at_consumer.nfService1.sNssais[2]) := none;
    init(prod_at_consumer.nfService1.allowedsNssais[1]) := none;
    init(prod_at_consumer.nfService1.allowedsNssais[2]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFInstances[1]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFInstances[2]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService1.operation1.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService1.operation1.opName) := none;
    init(prod_at_consumer.nfService1.operation1.opScope1) := none;
    init(prod_at_consumer.nfService1.operation1.opScope2) := none;
    init(prod_at_consumer.nfService1.operation1.param1.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation1.param1.name) := none;
    init(prod_at_consumer.nfService1.operation1.param1.value) := 0;
    init(prod_at_consumer.nfService1.operation1.param2.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation1.param2.name) := none;
    init(prod_at_consumer.nfService1.operation1.param2.value) := 0;
    init(prod_at_consumer.nfService1.operation2.allowedNFInstances[1]) := none;
    init(prod_at_consumer.nfService1.operation2.allowedNFInstances[2]) := none;
    init(prod_at_consumer.nfService1.operation2.allowedNFTypes[1]) := none;
    init(prod_at_consumer.nfService1.operation2.allowedNFTypes[2]) := none;
    init(prod_at_consumer.nfService1.operation2.opName) := none;
    init(prod_at_consumer.nfService1.operation2.opScope1) := none;
    init(prod_at_consumer.nfService1.operation2.opScope2) := none;
    init(prod_at_consumer.nfService1.operation2.param1.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation2.param1.name) := none;
    init(prod_at_consumer.nfService1.operation2.param1.value) := 0;
    init(prod_at_consumer.nfService1.operation2.param2.isSensitive) := FALSE;
    init(prod_at_consumer.nfService1.operation2.param2.name) := none;
    init(prod_at_consumer.nfService1.operation2.param2.value) := 0;

    next(prod_at_consumer.model_id) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.model_id;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.model_id;
        (isNFDiscovered1) : producer1.model_id;
        (isNFDiscovered2) : producer2.model_id;
        TRUE : prod_at_consumer.model_id;
    esac;
    next(prod_at_consumer.CCA_subject) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.CCA_subject;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.CCA_subject;
        (isNFDiscovered1) : producer1.CCA_subject;
        (isNFDiscovered2) : producer2.CCA_subject;
        TRUE : prod_at_consumer.CCA_subject;
    esac;
    next(prod_at_consumer.nfInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfInstanceId;
        (isNFDiscovered1) : producer1.nfInstanceId;
        (isNFDiscovered2) : producer2.nfInstanceId;
        TRUE : prod_at_consumer.nfInstanceId;
    esac;
    next(prod_at_consumer.nfType) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfType;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfType;
        (isNFDiscovered1) : producer1.nfType;
        (isNFDiscovered2) : producer2.nfType;
        TRUE : prod_at_consumer.nfType;
    esac;
    next(prod_at_consumer.nfStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.nfStatus;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.nfStatus;
        (isNFDiscovered1) : producer1.nfStatus;
        (isNFDiscovered2) : producer2.nfStatus;
        TRUE : prod_at_consumer.nfStatus;
    esac;
    next(prod_at_consumer.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.sNssais[1];
        (isNFDiscovered1) : producer1.sNssais[1];
        (isNFDiscovered2) : producer2.sNssais[1];
        TRUE : prod_at_consumer.sNssais[1];
    esac;
    next(prod_at_consumer.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.sNssais[2];
        (isNFDiscovered1) : producer1.sNssais[2];
        (isNFDiscovered2) : producer2.sNssais[2];
        TRUE : prod_at_consumer.sNssais[2];
    esac;
    next(prod_at_consumer.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedNFTypes[1];
        (isNFDiscovered1) : producer1.allowedNFTypes[1];
        (isNFDiscovered2) : producer2.allowedNFTypes[1];
        TRUE : prod_at_consumer.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedNFTypes[2];
        (isNFDiscovered1) : producer1.allowedNFTypes[2];
        (isNFDiscovered2) : producer2.allowedNFTypes[2];
        TRUE : prod_at_consumer.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedsNssais[1];
        (isNFDiscovered1) : producer1.allowedsNssais[1];
        (isNFDiscovered2) : producer2.allowedsNssais[1];
        TRUE : prod_at_consumer.allowedsNssais[1];
    esac;
    next(prod_at_consumer.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.allowedsNssais[2];
        (isNFDiscovered1) : producer1.allowedsNssais[2];
        (isNFDiscovered2) : producer2.allowedsNssais[2];
        TRUE : prod_at_consumer.allowedsNssais[2];
    esac;
    next(prod_at_consumer.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.load;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.load;
        (isNFDiscovered1) : producer1.load;
        (isNFDiscovered2) : producer2.load;
        TRUE : prod_at_consumer.load;
    esac;
    next(prod_at_consumer.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.capacity;
        (isNFDiscovered1) : producer1.capacity;
        (isNFDiscovered2) : producer2.capacity;
        TRUE : prod_at_consumer.capacity;
    esac;
    next(prod_at_consumer.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1) : producer1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2) : producer2.priority;
        (isNFDiscovered1) : producer1.priority;
        (isNFDiscovered2) : producer2.priority;
        TRUE : prod_at_consumer.priority;
    esac;
    next(prod_at_consumer.nfService1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService1.load) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.load;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.load;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.load;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.load;
    esac;
    next(prod_at_consumer.nfService1.capacity) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.capacity;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.capacity;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.capacity;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.capacity;
    esac;
    next(prod_at_consumer.nfService1.oauth2Required) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.oauth2Required;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.oauth2Required;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.oauth2Required;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.oauth2Required;
    esac;
    next(prod_at_consumer.nfService1.priority) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.priority;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.priority;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.priority;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.priority;
    esac;
    next(prod_at_consumer.nfService1.serviceInstanceId) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceInstanceId;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceInstanceId;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.serviceInstanceId;
    esac;
    next(prod_at_consumer.nfService1.serviceName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.serviceName;
    esac;
    next(prod_at_consumer.nfService1.serviceStatus) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceStatus;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.serviceStatus;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.serviceStatus;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.serviceStatus;
    esac;
    next(prod_at_consumer.nfService1.sNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.sNssais[1];
    esac;
    next(prod_at_consumer.nfService1.sNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.sNssais[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.sNssais[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.sNssais[2];
    esac;
    next(prod_at_consumer.nfService1.allowedsNssais[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedsNssais[1];
    esac;
    next(prod_at_consumer.nfService1.allowedsNssais[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.allowedsNssais[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.allowedsNssais[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.allowedsNssais[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFInstances[1];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFInstances[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFInstances[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService1.operation1.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService1.operation1.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.opName;
    esac;
    next(prod_at_consumer.nfService1.operation1.opScope1) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope1;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope1;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope1;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope1;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.opScope1;
    esac;
    next(prod_at_consumer.nfService1.operation1.opScope2) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope2;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope2;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.opScope2;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.opScope2;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.opScope2;
    esac;
    next(prod_at_consumer.nfService1.operation1.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation1.param1.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation1.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.param1.name;
    esac;
    next(prod_at_consumer.nfService1.operation1.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param1.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param1.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation1.param1.value;
    esac;
    next(prod_at_consumer.nfService1.operation1.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation1.param2.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation1.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation1.param2.name;
    esac;
    next(prod_at_consumer.nfService1.operation1.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation1.param2.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation1.param2.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation1.param2.value;
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFInstances[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFInstances[1];
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFInstances[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFInstances[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFInstances[2];
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFTypes[1]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[1];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFTypes[1];
    esac;
    next(prod_at_consumer.nfService1.operation2.allowedNFTypes[2]) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.allowedNFTypes[2];
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.allowedNFTypes[2];
    esac;
    next(prod_at_consumer.nfService1.operation2.opName) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opName;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opName;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opName;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.opName;
    esac;
    next(prod_at_consumer.nfService1.operation2.opScope1) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope1;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope1;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope1;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope1;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.opScope1;
    esac;
    next(prod_at_consumer.nfService1.operation2.opScope2) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope2;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope2;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.opScope2;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.opScope2;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.opScope2;
    esac;
    next(prod_at_consumer.nfService1.operation2.param1.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation2.param1.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation2.param1.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.param1.name;
    esac;
    next(prod_at_consumer.nfService1.operation2.param1.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param1.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param1.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation2.param1.value;
    esac;
    next(prod_at_consumer.nfService1.operation2.param2.isSensitive) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : FALSE;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.isSensitive;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : FALSE;
        TRUE : prod_at_consumer.nfService1.operation2.param2.isSensitive;
    esac;
    next(prod_at_consumer.nfService1.operation2.param2.name) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.name;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : none;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.name;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : none;
        TRUE : prod_at_consumer.nfService1.operation2.param2.name;
    esac;
    next(prod_at_consumer.nfService1.operation2.param2.value) := case 
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered1 & isNFDiscovered2 & selectProducer = 2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName in {none, producer1.nfService1.serviceName}) : producer1.nfService1.operation2.param2.value;
        (isNFDiscovered1 & nfDiscoveryRequest.serviceName != producer1.nfService1.serviceName) : 0;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName in {none, producer2.nfService1.serviceName}) : producer2.nfService1.operation2.param2.value;
        (isNFDiscovered2 & nfDiscoveryRequest.serviceName != producer2.nfService1.serviceName) : 0;
        TRUE : prod_at_consumer.nfService1.operation2.param2.value;
    esac;

---------- begin AccessToken init ----------
    init(accessToken.sub) := none;
    init(accessToken.aud_NFInstanceId) := none;
    init(accessToken.aud_NFType) := none;
    init(accessToken.scopeService) := none;
    init(accessToken.scopeOperation) := none;
    init(accessToken.exp_) := TRUE;
    init(accessToken.producerSnssaiList[1]) := none;
    init(accessToken.producerSnssaiList[2]) := none;


    next(accessToken.sub) := case
        isAccessTokenReqAuthorized : accessTokenRequest.nfInstanceId;
        TRUE :  accessToken.sub;
    esac;
    next(accessToken.aud_NFInstanceId) := case 
        isAccessTokenReqAuthorized & reqForSpecificProducer : accessTokenRequest.targetNfInstanceId;
        isAccessTokenReqAuthorized & !reqForSpecificProducer : none;
        TRUE :  accessToken.aud_NFInstanceId;
    esac;
    next(accessToken.aud_NFType) := case 
        isAccessTokenReqAuthorized & reqForSpecificProducer : none;
        isAccessTokenReqAuthorized & !reqForSpecificProducer : accessTokenRequest.targetNFType;
        TRUE :  accessToken.aud_NFType;
    esac;
    next(accessToken.scopeService) := case 
        isAccessTokenReqAuthorized : accessTokenRequest.scopeService;
        TRUE :  accessToken.scopeService;
    esac;
    next(accessToken.scopeOperation) := case 
        isAccessTokenReqAuthorized & isOpLevelATReqAuthorized: accessTokenRequest.scopeOperation;
        TRUE :  accessToken.scopeOperation;
    esac;
    next(accessToken.exp_) := case 
        isAccessTokenReqAuthorized : FALSE;
        !(accessToken.exp_) : {TRUE, FALSE};
        TRUE : accessToken.exp_;
    esac;
    next(accessToken.producerSnssaiList[1]) := case 
        disableOptionalParams_AT: none;
        isAccessTokenReqAuthorized & reqForSpecificProducer: producer.sNssais[1];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer1 & !reqForSpecificProducer: producer1.sNssais[1];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer2 & !reqForSpecificProducer: producer2.sNssais[1];
        TRUE :  accessToken.producerSnssaiList[1];
    esac;
    next(accessToken.producerSnssaiList[2]) := case 
        disableOptionalParams_AT: none;
        isAccessTokenReqAuthorized & reqForSpecificProducer: producer.sNssais[2];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer1 & !reqForSpecificProducer: producer1.sNssais[2];
        isAccessTokenReqAuthorized & isServiceLevelATReqAuthorizedForProducer2 & !reqForSpecificProducer: producer2.sNssais[2];
        TRUE :  accessToken.producerSnssaiList[2];
    esac;
---------- begin AccessTokenRequest init ----------
    init(accessTokenRequest.grantType) := none;
    init(accessTokenRequest.nfInstanceId) := none;
    init(accessTokenRequest.scopeService) := none;
    init(accessTokenRequest.scopeOperation) := none;
    init(accessTokenRequest.targetNFType) := none;
    init(accessTokenRequest.targetNfInstanceId) := none;
    init(accessTokenRequest.targetSnssaiList) := none;
    init(accessTokenRequest.requesterSNssais) := none;

---------- begin AccessTokenRequest next ----------
    next(accessTokenRequest.grantType) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, client_credentials};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : client_credentials;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : client_credentials;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : client_credentials;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : client_credentials;
        TRUE: none;
    esac;
    next(accessTokenRequest.nfInstanceId) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3, 4,5};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : consumer.nfInstanceId;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : consumer.nfInstanceId;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : consumer.nfInstanceId;
        TRUE: none;
    esac;
    next(accessTokenRequest.scopeService) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, service_1, service_2, service_3, service_4};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : {none, prod_at_consumer.nfService1.serviceName};
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : {none, prod_at_consumer.nfService1.serviceName};
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, service_1, service_2, service_3, service_4};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, service_1, service_2, service_3, service_4};
        TRUE: none;
    esac;
    next(accessTokenRequest.scopeOperation) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : {none, prod_at_consumer.nfService1.operation1.opScope2, prod_at_consumer.nfService1.operation2.opScope2};
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : {none, prod_at_consumer.nfService1.operation1.opScope2, prod_at_consumer.nfService1.operation2.opScope2};
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, op_scope_1, op_scope_2, op_scope_3, op_scope_4, op_scope_5, op_scope_6, op_scope_7, op_scope_8};
        TRUE: none;
    esac;
    next(accessTokenRequest.targetNFType) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : none;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : none;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, nf_1, nf_2, nf_3, nf_4};
        TRUE: none;
    esac;
    next(accessTokenRequest.targetNfInstanceId) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3, 4,5};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : prod_at_consumer.nfInstanceId;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : prod_at_consumer.nfInstanceId;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : none;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : none;
        TRUE: none;
    esac;
    next(accessTokenRequest.targetSnssaiList) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : none;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : none;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : {none, 1, 2, 3};
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : {none, 1, 2, 3};
        TRUE: none;
    esac;
    next(accessTokenRequest.requesterSNssais) := case
        (initConsumer & adversaryPresent & adversaryATRequest) : {none, 1, 2, 3};
        (reqForSpecificProducer & initConsumer & initProducer & !initATRequest) : consumerSNssai;
        (reqForSpecificProducer & initConsumer & initProducer & initATRequest & updateATRequest) : consumerSNssai;
        (!reqForSpecificProducer & initConsumer & !initATRequest) : consumerSNssai;
        (!reqForSpecificProducer & initConsumer & initATRequest & updateATRequest) : consumerSNssai;
        TRUE: accessTokenRequest.requesterSNssais;
    esac;

---------- begin ServiceRequest init ----------
    init(serviceRequest.subjectID) := none;
    init(serviceRequest.audienceID) := none;
    init(serviceRequest.service) := none;
    init(serviceRequest.operation) := none;
    init(serviceRequest.param1.isSensitive) := FALSE;
    init(serviceRequest.param1.name) := none;
    init(serviceRequest.param1.value) := 0;
    init(serviceRequest.param2.isSensitive) := FALSE;
    init(serviceRequest.param2.name) := none;
    init(serviceRequest.param2.value) := 0;
    init(serviceRequest.sNssais) := none;


---------- begin ServiceRequest next ----------
    next(serviceRequest.subjectID) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, 1, 2, 3, 4,5};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : consumer.nfInstanceId;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : consumer.nfInstanceId;
        TRUE: serviceRequest.subjectID;
    esac;
    next(serviceRequest.audienceID) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, 1, 2, 3, 4,5};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : producer.nfInstanceId;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : producer.nfInstanceId;
        TRUE: serviceRequest.audienceID;
    esac;
    next(serviceRequest.service) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, service_1, service_2, service_3, service_4};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : {none, prod_at_consumer.nfService1.serviceName};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : {none, prod_at_consumer.nfService1.serviceName};
        TRUE: serviceRequest.service;
    esac;
    next(serviceRequest.operation) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, op_1, op_2, op_3, op_4,  op_5, op_6, op_7, op_8};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.opName;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.opName;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.opName;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.opName;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.opName;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.opName;
        TRUE: serviceRequest.operation;
    esac;
    next(serviceRequest.param1.isSensitive) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.isSensitive;
        TRUE: serviceRequest.param1.isSensitive;
    esac;
    next(serviceRequest.param1.name) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.name;
        TRUE: serviceRequest.param1.name;
    esac;
    next(serviceRequest.param1.value) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : 0..100;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param1.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param1.value;
        TRUE: serviceRequest.param1.value;
    esac;
    next(serviceRequest.param2.isSensitive) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.isSensitive;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.isSensitive;
        TRUE: serviceRequest.param2.isSensitive;
    esac;
    next(serviceRequest.param2.name) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.name;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.name;
        TRUE: serviceRequest.param2.name;
    esac;
    next(serviceRequest.param2.value) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : 0..100;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & selectOperation) : prod_at_consumer.nfService1.operation1.param2.value;
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest & !selectOperation) : prod_at_consumer.nfService1.operation2.param2.value;
        TRUE: serviceRequest.param2.value;
    esac;
    next(serviceRequest.sNssais) := case
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & adversaryPresent & adversaryServiceRequest) : {none, 1, 2, 3};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & !initServiceRequest) : {consumer.sNssais[1],consumer.sNssais[2]};
        (consumer.isNFInstanceValid & prod_at_consumer.isNFInstanceValid & accessToken.isTokenValid & initServiceRequest & updateServiceRequest) : {consumer.sNssais[1],consumer.sNssais[2]};
        TRUE: serviceRequest.sNssais;
    esac;